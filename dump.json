[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/GraphView.js",
    "memberof": null,
    "longname": "src/GraphView.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import PIXI from \"pixi.js\";\nimport _    from \"lodash/fp\";\n\nimport {Vec2}   from \"@ignavia/ella\";\nimport {Layout} from \"@ignavia/earl\";\n\nimport {graphVisualizer} from \"./graph/graph.js\";\nimport {nodeVisualizer}  from \"./node/node.js\";\nimport {edgeVisualizer}  from \"./edge/edge.js\";\n\nimport CartesianFisheye from \"./filters/CartesianFisheye.js\";\nimport PolarFisheye     from \"./filters/PolarFisheye.js\";\n\n/**\n * The main class of the library.\n */\nexport default class GraphView {\n\n    /**\n     * @param {Graph} graphObj\n     * The graph object to display.\n     *\n     * @param {Object} options\n     * The options object.\n     *\n     * @param {Object} options.graphConf\n     * The configuration of the graph visualizer.\n     *\n     * @param {Map<String, Object>} options.nodeConfs\n     * Maps from node IDs to the configuration of the visualizer.\n     *\n     * @param {Map<String, Object>} options.edgeConfs\n     * Maps from edge IDs to the configuration of the visualizer.\n     *\n     * @param {Layout} layout\n     * The layout of the graph.\n     */\n    constructor(graphObj, {\n            graphConf = {},\n            nodeConfs = new Map(),\n            edgeConfs = new Map(),\n            layout    = new Layout(),\n        } = {}) {\n\n        /**\n         * The graph getting displayed.\n         *\n         * @type {Graph}\n         * @private\n         */\n        this.graph = graphObj;\n\n        /**\n         * The configuration of the edge visualizers.\n         *\n         * @type {Map<String, Object>}\n         * @private\n         */\n        this.edgeConfs = edgeConfs;\n\n        const {\n            renderer,\n            stage,\n            selectedNodeContainer,\n            nodeContainer,\n            selectedEdgeContainer,\n            edgeContainer\n        } = graphVisualizer(graphConf);\n\n        /**\n         * The renderer used to draw the stage.\n         *\n         * @type {Renderer}\n         * @private\n         */\n        this.renderer = renderer;\n\n        /**\n         * The display object to draw with the renderer.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.stage = stage;\n\n        /**\n         * The container for selected node display objects.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.selectedNodeContainer = selectedNodeContainer;\n\n        /**\n         * The container for the node display objects.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.nodeContainer = nodeContainer;\n\n        /**\n         * The container for selected edge display objects.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.selectedEdgeContainer = selectedEdgeContainer;\n\n        /**\n         * The container for the edge display object.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.edgeContainer = edgeContainer;\n\n        /**\n         * Maps from node IDs to their display objects.\n         *\n         * @type {Map<String, DisplayObject>}\n         * @private\n         */\n        this.nodes = new Map();\n\n        /**\n         * The IDs of the selected nodes.\n         *\n         * @type {Set<String>}\n         */\n        this.selectedNodes = new Set();\n\n        /**\n         * Maps from edge IDs to their display objects.\n         *\n         * @type {Map<String, DisplayObject>}\n         * @private\n         */\n        this.edges = new Map();\n\n        /**\n         * The IDs of the selected edges.\n         *\n         * @type {Set<String>}\n         */\n        this.selectedEdges = new Set();\n\n        /**\n         * The ID of the latest animation frame request.\n         *\n         * @type {number}\n         * @private\n         */\n        this.renderRequestId = undefined;\n\n        /**\n         * The cartesian fisheye filter.\n         *\n         * @type {CartesianFisheye}\n         * @private\n         */\n        this.cartesianFisheye = new CartesianFisheye();\n\n        /**\n         * The polar fisheye filter.\n         *\n         * @type {PolarFisheye}\n         * @private\n         */\n        this.polarFisheye = new PolarFisheye();\n\n        /**\n         * The steepness of the size-scaling curve.\n         *\n         * @type {number}\n         * @private\n         */\n        this.sizeScalingSteepness = 6;\n\n        /**\n         * The midpoint of the size-scaling curve.\n         *\n         * @type {number}\n         * @private\n         */\n        this.sizeScalingMidpoint = 0.5;\n\n        this.init(nodeConfs, edgeConfs, layout);\n    }\n\n    /**\n     * Draws the graph and starts the render loop.\n     *\n     * @param {Map<String, Object>} nodeConfs\n     * Maps from node IDs to the configuration of the visualizer.\n     *\n     * @param {Map<String, Object>} edgeConfs\n     * Maps from edge IDs to the configuration of the visualizer.\n     *\n     * @param {Layout} layout\n     * The layout of the graph.\n     */\n    init(nodeConfs, edgeConfs, layout) {\n        this.setFilterArea();\n        this.visualizeNodes(nodeConfs, layout);\n        this.visualizeEdges();\n    }\n\n    /**\n     * Sets the filter area of the stage.\n     */\n    setFilterArea(width = this.renderer.width, height = this.renderer.height) {\n        this.stage.filterArea = new PIXI.Rectangle(\n            0,\n            0,\n            width,\n            height\n        );\n    }\n\n    /**\n     * Draws the nodes of the graph.\n     *\n     * @param {Map<String, Object>} nodeConfs\n     * Maps from node IDs to the configuration of the visualizer.\n     *\n     * @param {Layout} layout\n     * The layout of the graph.\n     *\n     * @private\n     */\n    visualizeNodes(nodeConfs, layout) {\n        for (let nodeObj of this.graph.iterNodes()) {\n            const conf     = nodeConfs.get(nodeObj.id);\n            const position = layout.getPosition(nodeObj);\n            this.addNode(nodeObj, conf, position);\n        }\n    }\n\n    /**\n     * Adds the given node object to the scene.\n     *\n     * @param {Node} nodeObj\n     * The node object to add.\n     *\n     * @param {Object} conf\n     * The configuration of the vsualizer.\n     *\n     * @param {Vec2} position\n     * Where to move the created graphic.\n     */\n    addNode(nodeObj, conf, position) {\n        const displayObject = nodeVisualizer(conf);\n        displayObject.earlId = nodeObj.id;\n        this.storeScale(displayObject);\n\n        if (position) {\n            displayObject.x = position.x;\n            displayObject.y = position.y;\n        } else {\n            displayObject.x = Math.random() * this.renderer.width;\n            displayObject.y = Math.random() * this.renderer.height;\n        }\n\n        this.nodes.set(nodeObj.id, displayObject);\n\n        if (this.selectedNodes.has(nodeObj.id)) {\n            this.selectedNodeContainer.addChild(displayObject);\n        } else {\n            this.nodeContainer.addChild(displayObject);\n        }\n    }\n\n    /**\n     * Removes the node graphic with the given ID from the scene.\n     *\n     * @param {String} nodeId\n     * The ID of the graphic to remove.\n     */\n    removeNode(nodeId) {\n        const nodeG = this.getNodeDisplayObjectById(nodeId);\n\n        this.selectedNodes.delete(nodeId);\n        this.nodeContainer.removeChild(nodeG);\n        this.selectedNodeContainer.removeChild(nodeG);\n        this.nodes.delete(nodeId);\n    }\n\n    /**\n     * Returns the display object for the given node ID.\n     *\n     * @param {String} nodeId\n     * The ID of the node to get the display object for.\n     *\n     * @return {DisplayObject}\n     * The display object for the node.\n     */\n    getNodeDisplayObjectById(nodeId) {\n        return this.nodes.get(nodeId);\n    }\n\n    /**\n     * Selects the given nodes. Those are highlighted afterwards.\n     *\n     * @param {Set<String>} nodesToSelect\n     * The IDs of the nodes to select.\n     */\n    selectNodes(nodesToSelect) { // TODO: deselect selected nodes and select the new ones\n        for (let [id, node] of this.nodes) {\n            if (nodesToSelect.has(id)) {\n                this.nodeContainer.removeChild(node);\n                this.selectedNodeContainer.addChild(node);\n            } else {\n                this.selectedNodeContainer.removeChild(node);\n                this.nodeContainer.addChild(node);\n            }\n        }\n\n        this.selectedNodes = nodesToSelect;\n    }\n\n    /**\n     * Draws the edges of the graph.\n     *\n     * @private\n     */\n    visualizeEdges() {\n        for (let edgeObj of this.graph.iterEdges()) {\n            const conf = this.edgeConfs.get(edgeObj.id);\n            this.addEdge(edgeObj, conf);\n        }\n    }\n\n    /**\n     * Adds the given edge object to the scene.\n     *\n     * @param {Edge} edgeObj\n     * The edge object to add.\n     *\n     * @param {Object} conf\n     * The configuration of the visualizer.\n     */\n    addEdge(edgeObj, conf) {\n        const sourceG = this.nodes.get(edgeObj.sourceId);\n        const targetG = this.nodes.get(edgeObj.targetId);\n\n        const displayObject = edgeVisualizer(\n            new Vec2(sourceG.x, sourceG.y),\n            new Vec2(targetG.x, targetG.y),\n            conf\n        );\n        displayObject.earlId = edgeObj.id;\n        this.storeScale(displayObject.getArrow());\n        this.storeScale(displayObject.getDecal());\n\n        this.edgeConfs.set(edgeObj.id, conf);\n        this.edges.set(edgeObj.id, displayObject);\n\n        if (this.selectedEdges.has(edgeObj.id)) {\n            this.selectedEdgeContainer.addChild(displayObject);\n        } else {\n            this.edgeContainer.addChild(displayObject);\n        }\n    }\n\n    /**\n     * Removes the edge graphic with the given ID from the scene.\n     *\n     * @param {String} edgeId\n     * The ID of the graphic to remove.\n     */\n    removeEdge(edgeId) {\n        const edgeG = this.getEdgeDisplayObjectById(edgeId);\n\n        this.edgeConfs.delete(edgeId);\n        this.selectedEdges.delete(edgeId);\n        this.edgeContainer.removeChild(edgeG);\n        this.selectedEdgeContainer.removeChild(edgeG);\n        this.edges.delete(edgeId);\n    }\n\n    /**\n     * Returns the display object for the given edge ID.\n     *\n     * @param {String} edgeId\n     * The ID of the edge to get the display object for.\n     *\n     * @return {DisplayObject}\n     * The display object for the edge.\n     */\n    getEdgeDisplayObjectById(edgeId) {\n        return this.edges.get(edgeId);\n    }\n\n    /**\n     * Selects the given edges. Those are highlighted afterwards.\n     *\n     * @param {Set<String>} edgesToSelect\n     * The IDs of the edges to select.\n     */\n    selectEdges(edgesToSelect) { // deselect selected edges and select the new ones\n        for (let [id, edge] of this.edges) {\n            if (edgesToSelect.has(id)) {\n                this.edgeContainer.removeChild(edge);\n                this.selectedEdgeContainer.addChild(edge);\n            } else {\n                this.selectedEdgeContainer.removeChild(edge);\n                this.edgeContainer.addChild(edge);\n            }\n        }\n        this.selectedEdges = edgesToSelect;\n    }\n\n    /**\n     * Centers the stage.\n     */\n    center() {\n        const br = this.getBoundingRectangle();\n        this.stage.scale.x = 1;\n        this.stage.scale.y = 1;\n        this.stage.x = (this.renderer.width  - br.minX - br.maxX) / 2;\n        this.stage.y = (this.renderer.height - br.minY - br.maxY) / 2;\n    }\n\n    /**\n     * Returns the rectangle around the nodes.\n     *\n     * @return {Object}\n     * The bounding rectangle. The top-left corner is (minX, minY) and the\n     * bottom-right corner is (maxX, maxY).\n     *\n     * @private\n     */\n    getBoundingRectangle() {\n        const result = {\n            minX: Number.POSITIVE_INFINITY,\n            maxX: Number.NEGATIVE_INFINITY,\n            minY: Number.POSITIVE_INFINITY,\n            maxY: Number.NEGATIVE_INFINITY,\n        };\n\n        for (let [, node] of this.nodes) {\n            if (node.visible) {\n                result.minX = Math.min(result.minX, node.x);\n                result.maxX = Math.max(result.maxX, node.x);\n                result.minY = Math.min(result.minY, node.y);\n                result.maxY = Math.max(result.maxY, node.y);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Moves the node graphic with the given ID to the top.\n     *\n     * @param {String} nodeId\n     * The ID of the graphic.\n     */\n    moveNodeToTop(nodeId) {\n        const nodeG = this.getNodeDisplayObjectById(nodeId);\n        if (this.selectedNodes.has(nodeId)) {\n            this.selectedNodeContainer.removeChild(nodeG);\n            this.selectedNodeContainer.addChild(nodeG);\n        } else {\n            this.nodeContainer.removeChild(nodeG);\n            this.nodeContainer.addChild(nodeG);\n        }\n    }\n\n    /**\n     * Moves the edge graphic with the given ID to the top.\n     *\n     * @param {String} edgeId\n     * The ID of the graphic.\n     */\n    moveEdgeToTop(edgeId) {\n        const edgeG = this.getEdgeDisplayObjectById(edgeId);\n        if (this.selectedEdges.has(edgeId)) {\n            this.selectedEdgeContainer.removeChild(edgeG);\n            this.selectedEdgeContainer.addChild(edgeG);\n        } else {\n            this.edgeContainer.removeChild(edgeG);\n            this.edgeContainer.addChild(edgeG);\n        }\n    }\n\n    /**\n     * Sets the layout of the graph and moves the nodes accordingly.\n     *\n     * @param {Layout} layout\n     * The new layout.\n     */\n    setLayout(layout) {\n        this.stopRenderLoop();\n\n        for (let [id, position] of layout) {\n            const nodeG = this.getNodeDisplayObjectById(id);\n            if (nodeG) {\n                nodeG.x = position.x;\n                nodeG.y = position.y;\n            }\n        }\n\n        this.edges.clear();\n        this.edgeContainer.removeChildren();\n        this.selectedEdgeContainer.removeChildren();\n        this.visualizeEdges();\n\n        this.startRenderLoop();\n    }\n\n    /**\n     * Configures the cartesian fisheye filter.\n     *\n     * @param {number} centerHeight\n     * The midpoint of the distortion curve.\n     *\n     * @private\n     */\n    configureCartesianFisheye(centerHeight) {\n        this.cartesianFisheye.centerHeight = centerHeight;\n        if (centerHeight === 0.5) {\n            this.stage.filters = null;\n        } else {\n            this.stage.filters = [this.cartesianFisheye];\n        }\n    }\n\n    /**\n     * Configures the polar fisheye filter.\n     *\n     * @param {number} centerHeight\n     * The midpoint of the distortion curve.\n     *\n     * @param {number} radius\n     * The radius of the effect.\n     *\n     * @private\n     */\n    configurePolarFisheye(centerHeight, radius) {\n        this.polarFisheye.centerHeight = centerHeight;\n        this.polarFisheye.radius       = radius;\n        if (centerHeight === 0.5) {\n            this.stage.filters = null;\n        } else {\n            this.stage.filters = [this.polarFisheye];\n        }\n    }\n\n    /**\n     * Configures the size scaling.\n     *\n     * @param {number} mp\n     * The midpoint of the curve.\n     *\n     * @param {number} s\n     * The steepness of the curve.\n     *\n     * @private\n     */\n    configureSizeScaling(mp, s) {\n        this.sizeScalingMidpoint  = mp;\n        this.sizeScalingSteepness = s;\n        if (s === 0) {\n            this.restoreScales();\n        }\n    }\n\n    /**\n     * Restores the original scales of the graphics.\n     *\n     * @private\n     */\n    restoreScales() {\n        for (let nodeG of this.nodes.values()) {\n            this.restoreScale(nodeG);\n        }\n        for (let edgeG of this.edges.values()) {\n            this.restoreScale(edgeG.getArrow());\n            this.restoreScale(edgeG.getDecal());\n            edgeG.getLine().alpha = 1;\n        }\n    }\n\n    /**\n     * Restores the original scales of the given display object.\n     *\n     * @param {DisplayObject} displayObject\n     * The display object to scale.\n     *\n     * @private\n     */\n    restoreScale(displayObject) {\n        displayObject.scale.x = displayObject.origScaleX;\n        displayObject.scale.y = displayObject.origScaleY;\n    }\n\n    /**\n     * Saves the current scales of the given display object.\n     *\n     * @param {DisplayObject} displayObject\n     * The display object to snapshot.\n     *\n     * @private\n     */\n    storeScale(displayObject) {\n        displayObject.origScaleX = displayObject.scale.x;\n        displayObject.origScaleY = displayObject.scale.y;\n    }\n\n    /**\n     * Configures the filters.\n     *\n     * @param {Object} [options]\n     * The options object.\n     *\n     * @param {number} [options.cartesianFisheyeCenterHeight]\n     * The value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @param {number} [options.polarFisheyeCenterHeight]\n     * the value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @param {number} [options.polarFisheyeRadius]\n     * The radius of the effect.\n     *\n     * @param {number} [options.sizeScalingMidpoint]\n     * The midpoint of the curve.\n     *\n     * @param {number} [options.sizeScalingSteepness]\n     * The steepness of the curve.\n     */\n    configureFilters({\n        cartesianFisheyeCenterHeight  = this.cartesianFisheye.centerHeight,\n        polarFisheyeCenterHeight      = this.polarFisheye.centerHeight,\n        polarFisheyeRadius            = this.polarFisheye.radius,\n        sizeScalingMidpoint           = this.sizeScalingMidpoint,\n        sizeScalingSteepness          = this.sizeScalingSteepness,\n    } = {}) {\n        this.configureCartesianFisheye(\n            cartesianFisheyeCenterHeight\n        );\n        this.configurePolarFisheye(\n            polarFisheyeCenterHeight,\n            polarFisheyeRadius\n        );\n        this.configureSizeScaling(\n            sizeScalingMidpoint,\n            sizeScalingSteepness\n        );\n    }\n\n    /**\n     * Moves the node graphic with the given ID to the position.\n     *\n     * @param {String} nodeId\n     * The ID of the graphic.\n     *\n     * @param {Vec2} position\n     * Where to move the node.\n     */\n    moveNode(nodeId, position) {\n        const nodeG = this.getNodeDisplayObjectById(nodeId);\n        nodeG.x = position.x;\n        nodeG.y = position.y;\n\n        const nodeObj = this.graph.getNodeById(nodeId);\n        for (let edgeId of nodeObj.iterIncidentEdges()) {\n            const edgeG   = this.getEdgeDisplayObjectById(edgeId);\n            const edgeObj = this.graph.getEdgeById(edgeId);\n\n            this.edges.delete(edgeId);\n            this.edgeContainer.removeChild(edgeG);\n            this.selectedEdgeContainer.removeChild(edgeG);\n            this.addEdge(edgeObj);\n        }\n    }\n\n    /**\n     * Sets the visibility of the node and edge graphics. Only the ones in the\n     * given sets are shown afterwards.\n     *\n     * @param {Set<String>} nodesToKeep\n     * The nodes to keep.\n     *\n     * @param {Set<String>} edgesToKeep\n     * The edges to keep.\n     */\n    filterGraph(nodesToKeep, edgesToKeep) {\n        for (let [id, node] of this.nodes) {\n            node.visible = nodesToKeep.has(id);\n        }\n\n        this.filterEdges(edgesToKeep);\n    }\n\n    /**\n     * Sets the visibility of the edge graphics. Only the ones in the given set\n     * are shown afterwards.\n     *\n     * @param {Set<String>} edgesToKeep\n     * The edges to keep.\n     */\n    filterEdges(edgesToKeep) {\n        for (let [id, edge] of this.edges) {\n            edge.visible = edgesToKeep.has(id);\n        }\n    }\n\n    /**\n     * Resets the filters. All node and edge graphics are visible again\n     * afterwards.\n     */\n    resetFilters() {\n        this.resetNodeFilter();\n\n        for (let [id, edge] of this.edges) {\n            edge.visible = true;\n        }\n    }\n\n    /**\n     * Resets the node filter. All node graphics are visible again afterwards.\n     */\n    resetNodeFilter() {\n        for (let [id, node] of this.nodes) {\n            node.visible = true;\n        }\n    }\n\n    /**\n     * Resizes the renderer.\n     *\n     * @param {Number} width\n     * The new width.\n     *\n     * @param {Number} height\n     * The new height.\n     */\n    resize(width, height) {\n        this.renderer.resize(width, height);\n        this.setFilterArea(width, height);\n    }\n\n    /**\n     * Returns the width of the renderer.\n     *\n     * @return {number}\n     * The width of the renderer.\n     */\n    getWidth() {\n        return this.renderer.width;\n    }\n\n    /**\n     * Returns the height of the renderer.\n     *\n     * @return {number}\n     * The height of the renderer.\n     */\n    getHeight() {\n        return this.renderer.height;\n    }\n\n    /**\n     * Returns the canvas element used by the renderer.\n     *\n     * @return {Object}\n     * The canvas element.\n     */\n    getView() {\n        return this.renderer.view;\n    }\n\n    /**\n     * Starts the render loop.\n     */\n    startRenderLoop() {\n        if (!this.renderRequestId) {\n            this.animate();\n        }\n    }\n\n    /**\n     * Stops the render loop.\n     */\n    stopRenderLoop() {\n        if (this.renderRequestId) {\n            cancelAnimationFrame(this.renderRequestId);\n            this.renderRequestId = undefined;\n        }\n    }\n\n    /**\n     * Clamps the global mouse position to the renderer view.\n     *\n     * @return {Point}\n     * The clamped mouse position.\n     *\n     * @private\n     */\n    getClampedGlobalMousePosition() {\n        const globalPos = this.renderer.plugins.interaction.mouse.global;\n        globalPos.x     = _.clamp(0, this.renderer.width,  globalPos.x);\n        globalPos.y     = _.clamp(0, this.renderer.height, globalPos.y);\n        return globalPos;\n    }\n\n    /**\n     * Translates the global mouse position to the position on the stage.\n     *\n     * @return {Vec2}\n     * The point on the stage the mouse is on.\n     *\n     * @private\n     */\n    getLocalMousePosition() {\n        const point = this.renderer.plugins.interaction.mouse.getLocalPosition(\n            this.stage,\n            undefined,\n            this.getClampedGlobalMousePosition()\n        );\n        return new Vec2(point.x, point.y);\n    }\n\n    /**\n     * Translates the global mouse position to the position the filters need.\n     *\n     * @return {Vec2}\n     * The mouse position relative to the width and height of the renderer.\n     *\n     * @private\n     */\n    getRelativeMousePosition(v) {\n        const globalPos = this.getClampedGlobalMousePosition();\n        return new Vec2(\n            (globalPos.x) / this.renderer.width,\n            (globalPos.y) / this.renderer.height\n        );\n    }\n\n    /**\n     * The result and every larger length is regarded as 1 when distorting it.\n     *\n     * @return {Vec2}\n     * The maximum distance.\n     *\n     * @private\n     */\n    computeMaximumDistance() {\n        return new Vec2(\n            this.renderer.width  / this.stage.scale.x,\n            this.renderer.height / this.stage.scale.y\n        ).length();\n    }\n\n    /**\n     * Computes the distorting (scaling, transparency) based on the given\n     * distance.\n     *\n     * @param {number} distance\n     * The distance. This value is clamped to the range [0, 1].\n     *\n     * @return {number}\n     * The suggested distortion. This is a value between 0 and 1.\n     */\n    distort(distance) {\n        distance = _.clamp(0, 1, distance);\n        const f  = distance => 1 / (1 + Math.exp(-this.sizeScalingSteepness * (this.sizeScalingMidpoint - distance)));\n        return (f(distance) - f(1)) / (f(0) - f(1));\n    }\n\n    /**\n     * Computes the distortion of the given display object.\n     *\n     * @param {DisplayObject} displayObject\n     * Th display object to use.\n     *\n     * @param {Vec2} mousePos\n     * Where the mouse pointer is.\n     *\n     * @param {number} maximumDistance\n     * Everything larger than this is regarded as distance 1.\n     */\n    computeDistortion(displayObject, mousePos, maximumDistance) {\n        const pos      = displayObject.position;\n        const distance = mousePos.sub(pos).length() / maximumDistance;\n        return this.distort(distance);\n    }\n\n    /**\n     * Uses the given distortion value to set the x- and y-scale of the\n     * display object.\n     *\n     * @param {DisplayObject} displayObject\n     * The display object to scale.\n     *\n     * @param {number} distortion\n     * The computed distortion.\n     */\n    distortScale(displayObject, distortion) {\n        displayObject.scale.x = displayObject.origScaleX * distortion / this.stage.scale.x;\n        displayObject.scale.y = displayObject.origScaleY * distortion / this.stage.scale.y;\n    }\n\n    /**\n     * Scales the display objects based on their distance to the mouse pointer.\n     */\n    scaleDisplayObjects() { // TODO check if visible/world visible\n        const mousePos        = this.getLocalMousePosition();\n        const maximumDistance = this.computeMaximumDistance();\n\n        for (let nodeG of this.nodes.values()) {\n            const distortion = this.computeDistortion(nodeG, mousePos, maximumDistance);\n            this.distortScale(nodeG, distortion);\n        }\n\n        for (let edgeG of this.edges.values()) {\n            const edgePos = new Vec2(edgeG.x, edgeG.y);\n\n            const arrowG          = edgeG.getArrow();\n            const arrowDistortion = this.computeDistortion(arrowG, mousePos.sub(edgePos), maximumDistance);\n            this.distortScale(arrowG, arrowDistortion);\n\n            const decalG          = edgeG.getDecal();\n            const decalDistortion = this.computeDistortion(decalG, mousePos.sub(edgePos), maximumDistance);\n            this.distortScale(decalG, decalDistortion);\n\n            const edgeObj          = this.graph.getEdgeById(edgeG.earlId);\n            const sourceG          = this.getNodeDisplayObjectById(edgeObj.sourceId);\n            const targetG          = this.getNodeDisplayObjectById(edgeObj.targetId);\n            const sourceDistortion = this.computeDistortion(sourceG, mousePos, maximumDistance);\n            const targetDistortion = this.computeDistortion(targetG, mousePos, maximumDistance);\n            edgeG.getLine().alpha = Math.max(\n                arrowDistortion,\n                decalDistortion,\n                sourceDistortion,\n                targetDistortion\n            );\n        }\n    }\n\n    /**\n     * Repeatedly draws the stage.\n     *\n     * @private\n     */\n    animate() {\n        this.cartesianFisheye.focus = this.getRelativeMousePosition();\n        this.polarFisheye.focus     = this.getRelativeMousePosition();\n\n        if (this.sizeScalingSteepness !== 0) {\n            this.scaleDisplayObjects();\n        }\n\n        this.renderer.render(this.stage);\n        this.renderRequestId = requestAnimationFrame(() => this.animate());\n    }\n}"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GraphView",
    "memberof": "src/GraphView.js",
    "longname": "src/GraphView.js~GraphView",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/GraphView.js",
    "importStyle": "GraphView",
    "description": "The main class of the library.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#constructor",
    "access": null,
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graphObj",
        "description": "The graph object to display."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.graphConf",
        "description": "The configuration of the graph visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Map<String, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nodeConfs",
        "description": "Maps from node IDs to the configuration of the visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Map<String, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.edgeConfs",
        "description": "Maps from edge IDs to the configuration of the visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The layout of the graph."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "graph",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#graph",
    "access": "private",
    "description": "The graph getting displayed.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "edgeConfs",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#edgeConfs",
    "access": "private",
    "description": "The configuration of the edge visualizers.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "renderer",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#renderer",
    "access": "private",
    "description": "The renderer used to draw the stage.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stage",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#stage",
    "access": "private",
    "description": "The display object to draw with the renderer.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedNodeContainer",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedNodeContainer",
    "access": "private",
    "description": "The container for selected node display objects.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodeContainer",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#nodeContainer",
    "access": "private",
    "description": "The container for the node display objects.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedEdgeContainer",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedEdgeContainer",
    "access": "private",
    "description": "The container for selected edge display objects.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "edgeContainer",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#edgeContainer",
    "access": "private",
    "description": "The container for the edge display object.",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodes",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#nodes",
    "access": "private",
    "description": "Maps from node IDs to their display objects.",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, DisplayObject>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedNodes",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedNodes",
    "access": null,
    "description": "The IDs of the selected nodes.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "Set<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "edges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#edges",
    "access": "private",
    "description": "Maps from edge IDs to their display objects.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, DisplayObject>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedEdges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedEdges",
    "access": null,
    "description": "The IDs of the selected edges.",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "Set<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "renderRequestId",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#renderRequestId",
    "access": "private",
    "description": "The ID of the latest animation frame request.",
    "lineNumber": 154,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cartesianFisheye",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#cartesianFisheye",
    "access": "private",
    "description": "The cartesian fisheye filter.",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "CartesianFisheye"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "polarFisheye",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#polarFisheye",
    "access": "private",
    "description": "The polar fisheye filter.",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "PolarFisheye"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sizeScalingSteepness",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#sizeScalingSteepness",
    "access": "private",
    "description": "The steepness of the size-scaling curve.",
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sizeScalingMidpoint",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#sizeScalingMidpoint",
    "access": "private",
    "description": "The midpoint of the size-scaling curve.",
    "lineNumber": 186,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#init",
    "access": null,
    "description": "Draws the graph and starts the render loop.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeConfs",
        "description": "Maps from node IDs to the configuration of the visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Map<String, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeConfs",
        "description": "Maps from edge IDs to the configuration of the visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The layout of the graph."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setFilterArea",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#setFilterArea",
    "access": null,
    "description": "Sets the filter area of the stage.",
    "lineNumber": 212,
    "params": [
      {
        "name": "width",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "visualizeNodes",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#visualizeNodes",
    "access": "private",
    "description": "Draws the nodes of the graph.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<String, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeConfs",
        "description": "Maps from node IDs to the configuration of the visualizer."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The layout of the graph."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addNode",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#addNode",
    "access": null,
    "description": "Adds the given node object to the scene.",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeObj",
        "description": "The node object to add."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the vsualizer."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Where to move the created graphic."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeNode",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#removeNode",
    "access": null,
    "description": "Removes the node graphic with the given ID from the scene.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The ID of the graphic to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNodeDisplayObjectById",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getNodeDisplayObjectById",
    "access": null,
    "description": "Returns the display object for the given node ID.",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The ID of the node to get the display object for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The display object for the node."
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectNodes",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectNodes",
    "access": null,
    "description": "Selects the given nodes. Those are highlighted afterwards.",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToSelect",
        "description": "The IDs of the nodes to select."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedNodes",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedNodes",
    "access": null,
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "visualizeEdges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#visualizeEdges",
    "access": "private",
    "description": "Draws the edges of the graph.",
    "lineNumber": 327,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdge",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#addEdge",
    "access": null,
    "description": "Adds the given edge object to the scene.",
    "lineNumber": 343,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeObj",
        "description": "The edge object to add."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the visualizer."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeEdge",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#removeEdge",
    "access": null,
    "description": "Removes the edge graphic with the given ID from the scene.",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "The ID of the graphic to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getEdgeDisplayObjectById",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getEdgeDisplayObjectById",
    "access": null,
    "description": "Returns the display object for the given edge ID.",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "The ID of the edge to get the display object for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The display object for the edge."
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectEdges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectEdges",
    "access": null,
    "description": "Selects the given edges. Those are highlighted afterwards.",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "edgesToSelect",
        "description": "The IDs of the edges to select."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedEdges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#selectedEdges",
    "access": null,
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "center",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#center",
    "access": null,
    "description": "Centers the stage.",
    "lineNumber": 417,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getBoundingRectangle",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getBoundingRectangle",
    "access": "private",
    "description": "Returns the rectangle around the nodes.",
    "lineNumber": 434,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The bounding rectangle. The top-left corner is (minX, minY) and the\nbottom-right corner is (maxX, maxY)."
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveNodeToTop",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#moveNodeToTop",
    "access": null,
    "description": "Moves the node graphic with the given ID to the top.",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The ID of the graphic."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveEdgeToTop",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#moveEdgeToTop",
    "access": null,
    "description": "Moves the edge graphic with the given ID to the top.",
    "lineNumber": 477,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "The ID of the graphic."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setLayout",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#setLayout",
    "access": null,
    "description": "Sets the layout of the graph and moves the nodes accordingly.",
    "lineNumber": 494,
    "params": [
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The new layout."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configureCartesianFisheye",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#configureCartesianFisheye",
    "access": "private",
    "description": "Configures the cartesian fisheye filter.",
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "centerHeight",
        "description": "The midpoint of the distortion curve."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configurePolarFisheye",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#configurePolarFisheye",
    "access": "private",
    "description": "Configures the polar fisheye filter.",
    "lineNumber": 541,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "centerHeight",
        "description": "The midpoint of the distortion curve."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "The radius of the effect."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configureSizeScaling",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#configureSizeScaling",
    "access": "private",
    "description": "Configures the size scaling.",
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mp",
        "description": "The midpoint of the curve."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The steepness of the curve."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sizeScalingMidpoint",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#sizeScalingMidpoint",
    "access": null,
    "description": null,
    "lineNumber": 563,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sizeScalingSteepness",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#sizeScalingSteepness",
    "access": null,
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restoreScales",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#restoreScales",
    "access": "private",
    "description": "Restores the original scales of the graphics.",
    "lineNumber": 575,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "restoreScale",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#restoreScale",
    "access": "private",
    "description": "Restores the original scales of the given display object.",
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to scale."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "storeScale",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#storeScale",
    "access": "private",
    "description": "Saves the current scales of the given display object.",
    "lineNumber": 607,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to snapshot."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configureFilters",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#configureFilters",
    "access": null,
    "description": "Configures the filters.",
    "lineNumber": 635,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.cartesianFisheyeCenterHeight",
        "description": "The value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.polarFisheyeCenterHeight",
        "description": "the value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.polarFisheyeRadius",
        "description": "The radius of the effect."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sizeScalingMidpoint",
        "description": "The midpoint of the curve."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sizeScalingSteepness",
        "description": "The steepness of the curve."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveNode",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#moveNode",
    "access": null,
    "description": "Moves the node graphic with the given ID to the position.",
    "lineNumber": 664,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The ID of the graphic."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Where to move the node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filterGraph",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#filterGraph",
    "access": null,
    "description": "Sets the visibility of the node and edge graphics. Only the ones in the\ngiven sets are shown afterwards.",
    "lineNumber": 691,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToKeep",
        "description": "The nodes to keep."
      },
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "edgesToKeep",
        "description": "The edges to keep."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filterEdges",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#filterEdges",
    "access": null,
    "description": "Sets the visibility of the edge graphics. Only the ones in the given set\nare shown afterwards.",
    "lineNumber": 706,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "edgesToKeep",
        "description": "The edges to keep."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetFilters",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#resetFilters",
    "access": null,
    "description": "Resets the filters. All node and edge graphics are visible again\nafterwards.",
    "lineNumber": 716,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetNodeFilter",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#resetNodeFilter",
    "access": null,
    "description": "Resets the node filter. All node graphics are visible again afterwards.",
    "lineNumber": 727,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resize",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#resize",
    "access": null,
    "description": "Resizes the renderer.",
    "lineNumber": 742,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The new width."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The new height."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getWidth",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getWidth",
    "access": null,
    "description": "Returns the width of the renderer.",
    "lineNumber": 753,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The width of the renderer."
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeight",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getHeight",
    "access": null,
    "description": "Returns the height of the renderer.",
    "lineNumber": 763,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The height of the renderer."
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getView",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getView",
    "access": null,
    "description": "Returns the canvas element used by the renderer.",
    "lineNumber": 773,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The canvas element."
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "startRenderLoop",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#startRenderLoop",
    "access": null,
    "description": "Starts the render loop.",
    "lineNumber": 780,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stopRenderLoop",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#stopRenderLoop",
    "access": null,
    "description": "Stops the render loop.",
    "lineNumber": 789,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "renderRequestId",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#renderRequestId",
    "access": null,
    "description": null,
    "lineNumber": 792,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getClampedGlobalMousePosition",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getClampedGlobalMousePosition",
    "access": "private",
    "description": "Clamps the global mouse position to the renderer view.",
    "lineNumber": 804,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "The clamped mouse position."
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLocalMousePosition",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getLocalMousePosition",
    "access": "private",
    "description": "Translates the global mouse position to the position on the stage.",
    "lineNumber": 819,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The point on the stage the mouse is on."
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRelativeMousePosition",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#getRelativeMousePosition",
    "access": "private",
    "description": "Translates the global mouse position to the position the filters need.",
    "lineNumber": 836,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The mouse position relative to the width and height of the renderer."
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeMaximumDistance",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#computeMaximumDistance",
    "access": "private",
    "description": "The result and every larger length is regarded as 1 when distorting it.",
    "lineNumber": 852,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The maximum distance."
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "distort",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#distort",
    "access": null,
    "description": "Computes the distorting (scaling, transparency) based on the given\ndistance.",
    "lineNumber": 869,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "The distance. This value is clamped to the range [0, 1]."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The suggested distortion. This is a value between 0 and 1."
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeDistortion",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#computeDistortion",
    "access": null,
    "description": "Computes the distortion of the given display object.",
    "lineNumber": 887,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "Th display object to use."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "mousePos",
        "description": "Where the mouse pointer is."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumDistance",
        "description": "Everything larger than this is regarded as distance 1."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "distortScale",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#distortScale",
    "access": null,
    "description": "Uses the given distortion value to set the x- and y-scale of the\ndisplay object.",
    "lineNumber": 903,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to scale."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "distortion",
        "description": "The computed distortion."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "scaleDisplayObjects",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#scaleDisplayObjects",
    "access": null,
    "description": "Scales the display objects based on their distance to the mouse pointer.",
    "lineNumber": 911,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "animate",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#animate",
    "access": "private",
    "description": "Repeatedly draws the stage.",
    "lineNumber": 950,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "renderRequestId",
    "memberof": "src/GraphView.js~GraphView",
    "longname": "src/GraphView.js~GraphView#renderRequestId",
    "access": null,
    "description": null,
    "lineNumber": 959,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/draph.js",
    "memberof": null,
    "longname": "src/draph.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export GraphView  from \"./GraphView.js\";\nexport *          from \"./graph/graph.js\";\nexport *          from \"./node/node.js\";\nexport *          from \"./edge/edge.js\";\nexport registry   from \"./registry.js\";\nexport * as utils from \"./utils.js\";\n"
  },
  {
    "__docId__": 71,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/EdgeGraphic.js",
    "memberof": null,
    "longname": "src/edge/EdgeGraphic.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\n * Bundles arrow, decal and line sprite into a single display object.\n */\nexport default class EdgeGraphic extends PIXI.Container {\n\n    /**\n     * @param {DisplayObject} arrow\n     * The arrow sprite.\n     *\n     * @param {DisplayObject} decal\n     * The decal sprite.\n     *\n     * @param {DisplayObject} line\n     * The line sprite.\n     */\n    constructor(arrow, decal, line) {\n        super();\n\n        /**\n         * The arrow sprite.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.arrow = arrow;\n\n        /**\n         * The decal sprite.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.decal = decal;\n\n        /**\n         * The line sprite.\n         *\n         * @type {DisplayObject}\n         * @private\n         */\n        this.line = line;\n\n        // Add sprites to container\n        this.addChild(line);\n        this.addChild(arrow);\n        this.addChild(decal);\n    }\n\n    /**\n     * Returns the arrow sprite.\n     *\n     * @return {DisplayObject}\n     * The arrow sprite.\n     */\n    getArrow() {\n        return this.arrow;\n    }\n\n    /**\n     * Returns the decal sprite.\n     *\n     * @return {DisplayObject}\n     * The decal sprite.\n     */\n    getDecal() {\n        return this.decal;\n    }\n\n    /**\n     * Returns the line sprite.\n     *\n     * @return {DisplayObject}\n     * The line sprite.\n     */\n    getLine() {\n        return this.line;\n    }\n}"
  },
  {
    "__docId__": 72,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EdgeGraphic",
    "memberof": "src/edge/EdgeGraphic.js",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/EdgeGraphic.js",
    "importStyle": "EdgeGraphic",
    "description": "Bundles arrow, decal and line sprite into a single display object.",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "PIXI~PIXI.Container"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#constructor",
    "access": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "arrow",
        "description": "The arrow sprite."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "decal",
        "description": "The decal sprite."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "The line sprite."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "arrow",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#arrow",
    "access": "private",
    "description": "The arrow sprite.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decal",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#decal",
    "access": "private",
    "description": "The decal sprite.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "line",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#line",
    "access": "private",
    "description": "The line sprite.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getArrow",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#getArrow",
    "access": null,
    "description": "Returns the arrow sprite.",
    "lineNumber": 55,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The arrow sprite."
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDecal",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#getDecal",
    "access": null,
    "description": "Returns the decal sprite.",
    "lineNumber": 65,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The decal sprite."
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLine",
    "memberof": "src/edge/EdgeGraphic.js~EdgeGraphic",
    "longname": "src/edge/EdgeGraphic.js~EdgeGraphic#getLine",
    "access": null,
    "description": "Returns the line sprite.",
    "lineNumber": 75,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The line sprite."
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/arrowStyles/emptyStyle.js",
    "memberof": null,
    "longname": "src/edge/arrowStyles/emptyStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry             from \"../../registry.js\";\nimport {emptyDisplayObject} from \"../../utils.js\";\n\n/**\n * Creates a sprite.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite() {\n    return emptyDisplayObject;\n}\nregistry.addEdgeArrowStyle(\"empty\", makeSprite);"
  },
  {
    "__docId__": 81,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/arrowStyles/emptyStyle.js",
    "longname": "src/edge/arrowStyles/emptyStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/emptyStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite.",
    "lineNumber": 10,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/arrowStyles/triangleStyle.js",
    "memberof": null,
    "longname": "src/edge/arrowStyles/triangleStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2}             from \"@ignavia/ella\";\nimport {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The color to fill the triangle with.\n     *\n     * @type {Color}\n     */\n    backgroundColor: predefinedColors.white,\n\n    /**\n     * How the border of the triangle should look.\n     *\n     * @type {Object}\n     */\n    border: {\n\n        /**\n         * The color of the border.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.black,\n\n        /**\n         * The width of the border.\n         *\n         * @type {Color}\n         */\n        width: 2\n    },\n\n    /**\n     * The measures of the triangle. At least two measures must be provided,\n     * one can be set to \"auto\". If all three are given, the tipAngle is ignored.\n     *\n     * @type {Object}\n     */\n    measures: {\n\n        /**\n         * The angle at the tip of the triangle in radians. Set this to \"auto\"\n         * to automatically determine this.\n         *\n         * @type {Number|String}\n         */\n        tipAngle: Math.PI / 4,\n\n        /**\n         * The length of the legs of the triangle. Set this to \"auto\" to\n         * automatically determine this.\n         *\n         * @type {Number|String}\n         */\n        legLength: \"auto\",\n\n        /**\n         * The length of the base of the triangle. Set this to \"auto\" to\n         * automatically determine this.\n         *\n         * @type {Number|String}\n         */\n        baseLength: 15\n    }\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    return utils.makeCanvasSprite(makeBox(conf));\n}\nregistry.addEdgeArrowStyle(\"triangle\", makeSprite);\n\n/**\n * Creates the display object of the triangle.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nfunction makeBox(conf) {\n    const {tip, baseLeft, baseRight} = computeVertices(conf);\n\n    const result = new PIXI.Graphics();\n    result.lineStyle(conf.border.width, conf.border.color.hex, conf.border.color.alpha);\n    result.beginFill(conf.backgroundColor.hex, conf.backgroundColor.alpha);\n\n    result.moveTo(baseLeft.x,  baseLeft.y);\n    result.lineTo(0,           0);\n    result.lineTo(baseRight.x, baseRight.y);\n    result.lineTo(baseLeft.x,  baseLeft.y);\n\n    return result;\n}\n\n/**\n * Computes the positions of the corners of the triangles.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @return {Object}\n * The positions of the corners.\n */\nfunction computeVertices(conf) {\n    const {baseLength: b, legLength: l} = computeMeasures(conf);\n    const h = Math.sqrt(l**2 - (b / 2)**2);\n\n    return {\n        tip:       new Vec2(0, 0),\n        baseLeft:  new Vec2(-h, -b / 2),\n        baseRight: new Vec2(-h,  b / 2),\n    };\n}\n\n/**\n * Compute the missing measure of the triangle.\n */\nfunction computeMeasures(conf) {\n    const autoBaseLength = conf.measures.baseLength === \"auto\";\n    const autoLegLength  = conf.measures.legLength  === \"auto\";\n    const autoTipAngle   = conf.measures.tipAngle   === \"auto\";\n\n    const numberOfUnknowns = (autoBaseLength ? 1 : 0) +\n                             (autoLegLength  ? 1 : 0) +\n                             (autoTipAngle   ? 1 : 0);\n\n    if (numberOfUnknowns > 1) {\n        throw new Error(\"At least two measures must be provided.\");\n    }\n\n    if (autoBaseLength) {\n        return {\n            baseLength: computeBaseLength(conf),\n            legLength:  conf.measures.legLength\n        };\n    } else if (autoLegLength) {\n        return {\n            baseLength: conf.measures.baseLength,\n            legLength:  computeLegLength(conf)\n        };\n    } else {\n        return {\n            baseLength: conf.measures.baseLength,\n            legLength:  conf.measures.legLength\n        };\n    }\n}\n\n/**\n * Computes the length of the base of the triangle.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @return {Number}\n * The length of the base.\n */\nfunction computeBaseLength(conf) {\n    return 2 * conf.measures.legLength * Math.sin(conf.measures.tipAngle / 2);\n}\n\n/**\n * Computes the length of the legs of the triangle.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @return {Number}\n * The length of the legs.\n */\nfunction computeLegLength(conf) {\n    return conf.measures.baseLength / (2 * Math.sin(conf.measures.tipAngle / 2));\n}\n"
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeBox",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~makeBox",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": null,
    "description": "Creates the display object of the triangle.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeVertices",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~computeVertices",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": null,
    "description": "Computes the positions of the corners of the triangles.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The positions of the corners."
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeMeasures",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~computeMeasures",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": null,
    "description": "Compute the missing measure of the triangle.",
    "lineNumber": 141,
    "params": [
      {
        "name": "conf",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeBaseLength",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~computeBaseLength",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": null,
    "description": "Computes the length of the base of the triangle.",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The length of the base."
    },
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeLegLength",
    "memberof": "src/edge/arrowStyles/triangleStyle.js",
    "longname": "src/edge/arrowStyles/triangleStyle.js~computeLegLength",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/arrowStyles/triangleStyle.js",
    "importStyle": null,
    "description": "Computes the length of the legs of the triangle.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The length of the legs."
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/behaviors/emptyBehavior.js",
    "memberof": null,
    "longname": "src/edge/behaviors/emptyBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry from \"../../registry.js\";\n\n/**\n * Does absolutely nothing.\n *\n * @param {DisplayObject} displayObject\n * The display object to add behavior to.\n */\nexport default function addBehavior(displayObject) {}\nregistry.addEdgeBehavior(\"empty\", addBehavior);"
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/edge/behaviors/emptyBehavior.js",
    "longname": "src/edge/behaviors/emptyBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/behaviors/emptyBehavior.js",
    "importStyle": "addBehavior",
    "description": "Does absolutely nothing.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to add behavior to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/behaviors/interactiveBehavior.js",
    "memberof": null,
    "longname": "src/edge/behaviors/interactiveBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this behavior.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * Is triggered when the mouse moves onto the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseover: () => {},\n\n    /**\n     * Is triggered when the mouse leaves the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseout: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is pressed when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMousedown: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is released when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseup: () => {},\n\n    /**\n     * Is triggered right after the mouseup event.\n     *\n     * @type {Function}\n     */\n    handleClick: () => {},\n\n    /**\n     * Is triggered when the display object is touched.\n     *\n     * @type {Function}\n     */\n    handleTouchstart: () => {},\n\n    /**\n     * Is triggered when the display object is no longer touched.\n     *\n     * @type {Function}\n     */\n    handleTouchend: () => {},\n\n    /**\n     * Is triggered right after the touchend event.\n     *\n     * @type {Function}\n     */\n    handleTap: () => {},\n};\n\n/**\n * Adds event handlers to the given display object.\n *\n * @param {DisplayObject} displayObject\n * The display object to make interactive.\n *\n * @param {Object} [conf]\n * Contains the event handlers to add. Check the documentation of the default\n * configuration to see how this object is structured.\n */\nexport default function addBehavior(displayObject, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    utils.addInteraction(conf, displayObject);\n};\nregistry.addEdgeBehavior(\"interactive\", addBehavior);"
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/behaviors/interactiveBehavior.js",
    "longname": "src/edge/behaviors/interactiveBehavior.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/behaviors/interactiveBehavior.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this behavior.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/edge/behaviors/interactiveBehavior.js",
    "longname": "src/edge/behaviors/interactiveBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/behaviors/interactiveBehavior.js",
    "importStyle": "addBehavior",
    "description": "Adds event handlers to the given display object.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make interactive."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Contains the event handlers to add. Check the documentation of the default\nconfiguration to see how this object is structured."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/decalStyles/emptyStyle.js",
    "memberof": null,
    "longname": "src/edge/decalStyles/emptyStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry             from \"../../registry.js\";\nimport {emptyDisplayObject} from \"../../utils.js\";\n\n/**\n * Creates a sprite.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite() {\n    return emptyDisplayObject;\n}\nregistry.addEdgeDecalStyle(\"empty\", makeSprite);"
  },
  {
    "__docId__": 96,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/decalStyles/emptyStyle.js",
    "longname": "src/edge/decalStyles/emptyStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/decalStyles/emptyStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite.",
    "lineNumber": 10,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/decalStyles/illustratedStyle.js",
    "memberof": null,
    "longname": "src/edge/decalStyles/illustratedStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n/**\n     * How the box should look like.\n     *\n     * @type {Object}\n     */\n    box: {\n\n        /**\n         * The color to fill the box with.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.white,\n\n        /**\n         * How the border of the box should look.\n         *\n         * @type {Object}\n         */\n        border: {\n\n            /**\n             * The color of the border.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.black,\n\n            /**\n             * The radius of the border. This option only works when the shape is\n             * set to \"roundedRect\".\n             *\n             * @type {Number}\n             */\n            radius: 5,\n\n            /**\n             * The width of the border.\n             *\n             * @type {Number}\n             */\n            width: 2\n        },\n\n        /**\n         * The margin to add around the box. This might be necessary to prevent PIXI\n         * from cutting some pixels of the border off.\n         *\n         * @type {Number}\n         */\n        margin: 2,\n\n        /**\n         * The padding to add around the label.\n         *\n         * @type {Number}\n         */\n        padding: 10,\n\n        /**\n         * The shape of this node. The values \"circle\", \"ellipse\", \"rect\",\n         * \"roundedRect\" are supported.\n         *\n         * @type {String}\n         */\n        shape: \"rect\"\n    },\n\n\n    /**\n     * Affects the style of the caption.\n     *\n     * @type {Object}\n     */\n    caption: {\n\n        /**\n         * How large the gap between the given display object and the caption should be.\n         *\n         * @type {Number}\n         */\n        gap: 5,\n\n        /**\n         * Where the caption should be positioned in relation to the given display\n         * object. Possible options are \"center\", \"above\", \"right\", \"below\" and \"left\".\n         *\n         * @type {String}\n         */\n        side: \"below\", // below, above, left, right, center, none\n\n        /**\n         * How the text itself should look.\n         *\n         * @type {Object}\n         */\n        text: {\n\n            /**\n             * The caption to display.\n             *\n             * @type {String}\n             */\n            label: \"\",\n\n            /**\n             * How the text should be aligned. The possible values are \"left\", \"center\" and\n             * \"right\". For a single line of text this option has no effect.\n             *\n             * @type {String}\n             */\n            align:  \"left\",\n\n            /**\n             * How the drop shadow of the text should look.\n             *\n             * @type {Object}\n             */\n            dropShadow: {\n\n                /**\n                 * The angle of the drop shadow given in radian. An angle of 0 means that the\n                 * shadow goes to the right, increasing the angle moves the shadow clockwise.\n                 *\n                 * @type {Number}\n                 */\n                angle: Math.PI / 4,\n\n                /**\n                 * The color of the shadow.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.gray,\n\n                /**\n                 * How long the drop shadow should be. Set this to 0 to remove it.\n                 *\n                 * @type {Number}\n                 */\n                distance: 0\n            },\n\n            /**\n             * The color to fill the text with.\n             *\n             * @type {Color}\n             */\n            fillColor: predefinedColors.black,\n\n            /**\n             * Configures the font of the text.\n             *\n             * @type {Object}\n             */\n            font: {\n\n                /**\n                 * The font-family to use.\n                 *\n                 * @type {String}\n                 */\n                family: \"Arial\",\n\n                /**\n                 * The font-size to use.\n                 *\n                 * @type {Number}\n                 */\n                size: 8,\n\n                /**\n                 * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n                 *\n                 * @type {String}\n                 */\n                style: \"normal\",\n\n                /**\n                 * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n                 */\n                weight: \"normal\"\n            },\n\n            /**\n             * How the stroke around the text should look.\n             *\n             * @type {Object}\n             */\n            stroke: {\n\n                /**\n                 * The color of the stroke around the text.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.white,\n\n                /**\n                 * How thick the stroke should be. Set this to 0 to deactivate it.\n                 *\n                 * @type {Number}\n                 */\n                thickness: 0\n            },\n\n            /**\n             * The width at which the text is going to wrap. Set this to 0 to\n             * disable it.\n             *\n             * @type {Number}\n             */\n            wordWrapWidth: 0\n        }\n    },\n\n    /**\n     * How the image should look.\n     *\n     * @type {Object}\n     */\n    image: {\n\n        /**\n         * The path to the image to display.\n         *\n         * @type {String}\n         */\n        imagePath: \"\",\n\n        /**\n         * The width of the image. Set this to \"orig\" to use the width of the\n         * original image and to \"auto\" to keep the aspect ratio when setting\n         * the height.\n         *\n         * @type {Number|String}\n         */\n        width: \"orig\",\n\n        /**\n         * The height of the image. Set this to \"orig\" to use the height of the\n         * original image and to \"auto\" to keep the aspect ratio when setting\n         * the width.\n         *\n         * @type {Number|String}\n         */\n        height: \"orig\"\n    },\n\n    /**\n     * Whether the decal should be oriented along the line.\n     *\n     * @type {Boolean}\n     */\n    rotateToLine: false,\n};\n\n/**\n * Creates a sprite using the given configuration. This function is curried.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const container = utils.makeCaptionedImage(conf, conf.image.path, conf.caption.text.label);\n    const box       = utils.makeBox(conf.box, container);\n    const margin    = utils.makeMargin(conf.box.margin, box);\n    container.addChildAt(box, 0);\n    container.addChildAt(margin, 0);\n\n    const result = utils.makeCanvasSprite(container);\n    result.rotateToLine = conf.rotateToLine;\n\n    return result;\n};\nregistry.addEdgeDecalStyle(\"illustrated\", makeSprite);\n"
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/decalStyles/illustratedStyle.js",
    "longname": "src/edge/decalStyles/illustratedStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/decalStyles/illustratedStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/decalStyles/illustratedStyle.js",
    "longname": "src/edge/decalStyles/illustratedStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/decalStyles/illustratedStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration. This function is curried.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/decalStyles/labelledStyle.js",
    "memberof": null,
    "longname": "src/edge/decalStyles/labelledStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * How the box should look like.\n     *\n     * @type {Object}\n     */\n    box: {\n\n        /**\n         * The color to fill the box with.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.white,\n\n        /**\n         * How the border of the box should look.\n         *\n         * @type {Object}\n         */\n        border: {\n\n            /**\n             * The color of the border.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.black,\n\n            /**\n             * The radius of the border. This option only works when the shape is\n             * set to \"roundedRect\".\n             *\n             * @type {Number}\n             */\n            radius: 5,\n\n            /**\n             * The width of the border.\n             *\n             * @type {Number}\n             */\n            width: 2\n        },\n\n        /**\n         * The margin to add around the box. This might be necessary to prevent PIXI\n         * from cutting some pixels of the border off.\n         *\n         * @type {Number}\n         */\n        margin: 2,\n\n        /**\n         * The padding to add around the label.\n         *\n         * @type {Number}\n         */\n        padding: 5,\n\n        /**\n         * The shape of this node. The values \"circle\", \"ellipse\", \"rect\",\n         * \"roundedRect\" are supported.\n         *\n         * @type {String}\n         */\n        shape: \"rect\"\n    },\n\n    /**\n     * How the label should look.\n     *\n     * @type {Object}\n     */\n    text: {\n\n        /**\n         * The label to use.\n         *\n         * @type {String}\n         */\n        label: \"\",\n\n        /**\n         * How the text should be aligned. The possible values are \"left\", \"center\" and\n         * \"right\". For a single line of text this option has no effect.\n         *\n         * @type {String}\n         */\n        align:  \"left\",\n\n        /**\n         * How the drop shadow of the text should look.\n         *\n         * @type {Object}\n         */\n        dropShadow: {\n\n            /**\n             * The angle of the drop shadow given in radian. An angle of 0 means that the\n             * shadow goes to the right, increasing the angle moves the shadow clockwise.\n             *\n             * @type {Number}\n             */\n            angle: Math.PI / 4,\n\n            /**\n             * The color of the shadow.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.gray,\n\n            /**\n             * How long the drop shadow should be. Set this to 0 to remove it.\n             *\n             * @type {Number}\n             */\n            distance: 0\n        },\n\n        /**\n         * The color to fill the text with.\n         *\n         * @type {Color}\n         */\n        fillColor: predefinedColors.black,\n\n        /**\n         * Configures the font of the text.\n         *\n         * @type {Object}\n         */\n        font: {\n\n            /**\n             * The font-family to use.\n             *\n             * @type {String}\n             */\n            family: \"Arial\",\n\n            /**\n             * The font-size to use.\n             *\n             * @type {Number}\n             */\n            size: 16,\n\n            /**\n             * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n             *\n             * @type {String}\n             */\n            style: \"normal\",\n\n            /**\n             * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n             */\n            weight: \"bold\"\n        },\n\n        /**\n         * How the stroke around the text should look.\n         *\n         * @type {Object}\n         */\n        stroke: {\n\n            /**\n             * The color of the stroke around the text.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.white,\n\n            /**\n             * How thick the stroke should be. Set this to 0 to deactivate it.\n             *\n             * @type {Number}\n             */\n            thickness: 0\n        },\n\n        /**\n         * The width at which the text is going to wrap. Set this to 0 to\n         * disable it.\n         *\n         * @type {Number}\n         */\n        wordWrapWidth: 0\n    },\n\n    /**\n     * Whether the decal should be oriented along the line.\n     *\n     * @type {Boolean}\n     */\n    rotateToLine: false,\n};\n\n/**\n * Creates a sprite using the given configuration. This function is curried.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const container = utils.makeBoxedLabel(conf, conf.text.label);\n    const result    = utils.makeCanvasSprite(container);\n    result.rotateToLine = conf.rotateToLine;\n\n    return result;\n};\nregistry.addEdgeDecalStyle(\"labelled\", makeSprite);\n"
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/decalStyles/labelledStyle.js",
    "longname": "src/edge/decalStyles/labelledStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/decalStyles/labelledStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/decalStyles/labelledStyle.js",
    "longname": "src/edge/decalStyles/labelledStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/decalStyles/labelledStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration. This function is curried.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/edge.js",
    "memberof": null,
    "longname": "src/edge/edge.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export EdgeGraphic               from \"./EdgeGraphic.js\";\n\nexport edgeVisualizer            from \"./visualizer.js\";\n\nexport edgeEmptyArrowStyle       from \"./arrowStyles/emptyStyle.js\";\nexport edgeTriangleArrowStyle    from \"./arrowStyles/triangleStyle.js\";\n\nexport edgeEmptyDecalStyle       from \"./decalStyles/emptyStyle.js\";\nexport edgeLabelledDecalStyle    from \"./decalStyles/labelledStyle.js\";\nexport edgeIllustratedDecalStyle from \"./decalStyles/illustratedStyle.js\";\n\nexport edgeLinearLineStyle       from \"./lineStyles/linearStyle.js\";\nexport edgeQuadraticLineStyle    from \"./lineStyles/quadraticStyle.js\";\nexport edgeCubicLineStyle        from \"./lineStyles/cubicStyle.js\";\n\nexport edgeEmptyBehavior         from \"./behaviors/emptyBehavior.js\";\nexport edgeInteractiveBehavior   from \"./behaviors/interactiveBehavior.js\";\n"
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/lineStyles/cubicStyle.js",
    "memberof": null,
    "longname": "src/edge/lineStyles/cubicStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\nimport {Vec2}             from \"@ignavia/ella\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * How the line should look.\n     *\n     * @type {Object}\n     */\n    line: {\n\n        /**\n         * The color of the line.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.black,\n\n        /**\n         * The width of the line.\n         *\n         * @type {Number}\n         */\n        width: 2\n    },\n\n    /**\n     * Describes the first control point position.\n     *\n     * @type {Object}\n     */\n    controlPoint1: {\n\n        /**\n         * You start at the source position and move in a straight line towards\n         * the target node. This value describe how far you move along this\n         * line, with 0 meaning you are still at the source node and 1 meaning\n         * you reached the target node.\n         *\n         * @type {Number}\n         */\n        parallel: 0.33,\n\n        /**\n         * From the point you reached, you move this amount of pixels\n         * perpendicular to the connecting line.\n         *\n         * @type {Number}\n         */\n        perpendicular: 20,\n    },\n\n    /**\n     * Describes the second control point position.\n     *\n     * @type {Object}\n     */\n    controlPoint2: {\n\n        /**\n         * You start at the source position and move in a straight line towards\n         * the target node. This value describe how far you move along this\n         * line, with 0 meaning you are still at the source node and 1 meaning\n         * you reached the target node.\n         *\n         * @type {Number}\n         */\n        parallel: 0.66,\n\n        /**\n         * From the point you reached, you move this amount of pixels\n         * perpendicular to the connecting line.\n         *\n         * @type {Number}\n         */\n        perpendicular: -20,\n    },\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Vec2} targetPos\n * The position of the target node.\n *\n * @param {Object} conf\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(targetPos, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const controlPoint1 = computeControlPoint(targetPos, conf.controlPoint1);\n    const controlPoint2 = computeControlPoint(targetPos, conf.controlPoint2);\n    const f             = computeFunction(controlPoint1, controlPoint2, targetPos);\n    const df            = computeDerivative(controlPoint1, controlPoint2, targetPos);\n\n    const line = utils.makeBezierCurve(\n        conf.line,\n        new Vec2(0, 0),\n        controlPoint1,\n        controlPoint2,\n        targetPos\n    );\n    const result = utils.makeCanvasSprite(line);\n    result.decal = computePosAndAngle(f, df, 0.5);\n    result.arrow = computePosAndAngle(f, df, 0.75);\n\n    return result;\n};\nregistry.addEdgeLineStyle(\"cubic\", makeSprite);\n\n/**\n * Computes the coordinates of the control point in the regular coordinate\n * system.\n *\n * @param {Vec2} targetPos\n * The end point of the line.\n *\n * @param {Object} controlPoint\n * The description of the control point from the configuration.\n */\nfunction computeControlPoint(targetPos, controlPoint) {\n    const parallel      = targetPos.mul(controlPoint.parallel);\n    const perpendicular = targetPos.rotate(Math.PI / 2).normalize().mul(controlPoint.perpendicular);\n    return parallel.add(perpendicular);\n}\n\n/**\n * Computes the function of the cubic bezier curve.\n *\n * @param {Vec2} p1\n * The first control point.\n *\n * @param {Vec2} p2\n * The second control point.\n *\n * @param {Vec2} p3\n * The end point.\n */\nfunction computeFunction(p1, p2, p3) {\n    const a = p1.mul(3).add(p2.mul(-3)).add(p3);\n    const b = p1.mul(-6).add(p2.mul(3));\n    const c = p1.mul(3);\n    return t => a.mul(t**3).add(b.mul(t**2)).add(c.mul(t));\n}\n\n/**\n * Computes the derivative of the function of the cubic bezier curve.\n *\n * @param {Vec2} p1\n * The first control point.\n *\n * @param {Vec2} p2\n * The second control point.\n *\n * @param {Vec2} p3\n * The end point.\n */\nfunction computeDerivative(p1, p2, p3) {\n    const a = p1.mul(9).add(p2.mul(-9)).add(p3.mul(3));\n    const b = p1.mul(-12).add(p2.mul(6));\n    const c = p1.mul(3);\n    return t => a.mul(t**2).add(b.mul(t)).add(c);\n}\n\n/**\n * Computes the point and slope of the function at the given value.\n *\n * @param {Function} f\n * The function of the curve.\n *\n * @param {Function} df\n * The derivative of the function.\n *\n * @param {Number} t\n * How to move far along the line. 0 represents the start point (0, 0) and 1 is\n * the end point.\n */\nfunction computePosAndAngle(f, df, t) {\n    const slope = df(t);\n    return {\n        pos:   f(t),\n        angle: Math.atan2(slope.y, slope.x),\n    };\n}\n"
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The position of the target node."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeControlPoint",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~computeControlPoint",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": null,
    "description": "Computes the coordinates of the control point in the regular coordinate\nsystem.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The end point of the line."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "controlPoint",
        "description": "The description of the control point from the configuration."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeFunction",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~computeFunction",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": null,
    "description": "Computes the function of the cubic bezier curve.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "The first control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "The second control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p3",
        "description": "The end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeDerivative",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~computeDerivative",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": null,
    "description": "Computes the derivative of the function of the cubic bezier curve.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "The first control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "The second control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p3",
        "description": "The end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computePosAndAngle",
    "memberof": "src/edge/lineStyles/cubicStyle.js",
    "longname": "src/edge/lineStyles/cubicStyle.js~computePosAndAngle",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/cubicStyle.js",
    "importStyle": null,
    "description": "Computes the point and slope of the function at the given value.",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function of the curve."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "df",
        "description": "The derivative of the function."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "How to move far along the line. 0 represents the start point (0, 0) and 1 is\nthe end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/lineStyles/linearStyle.js",
    "memberof": null,
    "longname": "src/edge/lineStyles/linearStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\nimport {Vec2}             from \"@ignavia/ella\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The color of the line.\n     *\n     * @type {Color}\n     */\n    color: predefinedColors.black,\n\n    /**\n     * The width of the line.\n     *\n     * @type {Number}\n     */\n    width: 2,\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Vec2} targetPos\n * Where the line should end.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(targetPos, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const line   = utils.makeLine(conf, new Vec2(0, 0), targetPos);\n    const result = utils.makeCanvasSprite(line);\n    result.decal = computePosAndAngle(targetPos, 0.5);\n    result.arrow = computePosAndAngle(targetPos, 0.75);\n\n    return result;\n};\nregistry.addEdgeLineStyle(\"linear\", makeSprite);\n\n/**\n * Computes the point and slope of the function at the given value.\n *\n * @param {Vec2} targetPos\n * The end point of the line.\n *\n * @param {Number} t\n * How to move far along the line. 0 represents the start point (0, 0) and 1 is\n * the end point.\n */\nfunction computePosAndAngle(targetPos, t) {\n    return {\n        pos:   targetPos.mul(t),\n        angle: Math.atan2(targetPos.y, targetPos.x),\n    };\n}"
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/lineStyles/linearStyle.js",
    "longname": "src/edge/lineStyles/linearStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/linearStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/lineStyles/linearStyle.js",
    "longname": "src/edge/lineStyles/linearStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/linearStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "Where the line should end."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computePosAndAngle",
    "memberof": "src/edge/lineStyles/linearStyle.js",
    "longname": "src/edge/lineStyles/linearStyle.js~computePosAndAngle",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/linearStyle.js",
    "importStyle": null,
    "description": "Computes the point and slope of the function at the given value.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The end point of the line."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "How to move far along the line. 0 represents the start point (0, 0) and 1 is\nthe end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/lineStyles/quadraticStyle.js",
    "memberof": null,
    "longname": "src/edge/lineStyles/quadraticStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\nimport {Vec2}             from \"@ignavia/ella\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * How the line should look.\n     *\n     * @type {Object}\n     */\n    line: {\n\n        /**\n         * The color of the line.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.black,\n\n        /**\n         * The width of the line.\n         *\n         * @type {Number}\n         */\n        width: 2\n    },\n\n    /**\n     * Describes the control point position.\n     *\n     * @type {Object}\n     */\n    controlPoint: {\n\n        /**\n         * You start at the source position and move in a straight line towards\n         * the target node. This value describe how far you move along this\n         * line, with 0 meaning you are still at the source node and 1 meaning\n         * you reached the target node.\n         *\n         * @type {Number}\n         */\n        parallel: 0.5,\n\n        /**\n         * From the point you reached, you move this amount of pixels\n         * perpendicular to the connecting line.\n         *\n         * @type {Number}\n         */\n        perpendicular: 20,\n    },\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Vec2} targetPos\n * The position of the target node.\n *\n * @param {Object} conf\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(targetPos, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const controlPoint = computeControlPoint(targetPos, conf.controlPoint);\n    const f            = computeFunction(controlPoint, targetPos);\n    const df           = computeDerivative(controlPoint, targetPos);\n\n    const line = utils.makeQuadraticCurve(\n        conf.line,\n        new Vec2(0, 0),\n        controlPoint,\n        targetPos\n    );\n    const result = utils.makeCanvasSprite(line);\n    result.decal = computePosAndAngle(f, df, 0.5);\n    result.arrow = computePosAndAngle(f, df, 0.75);\n\n    return result;\n};\nregistry.addEdgeLineStyle(\"quadratic\", makeSprite);\n\n/**\n * Computes the coordinates of the control point in the regular coordinate\n * system.\n *\n * @param {Vec2} targetPos\n * The end point of the line.\n *\n * @param {Object} controlPoint\n * The description of the control point from the configuration.\n */\nfunction computeControlPoint(targetPos, controlPoint) {\n    const parallel      = targetPos.mul(controlPoint.parallel);\n    const perpendicular = targetPos.rotate(Math.PI / 2).normalize().mul(controlPoint.perpendicular);\n    return parallel.add(perpendicular);\n}\n\n/**\n * Computes the function of the quadratic bezier curve.\n *\n * @param {Vec2} p1\n * The control point.\n *\n * @param {Vec2} p2\n * The end point.\n */\nfunction computeFunction(p1, p2) {\n    const a = p2.sub(p1.mul(2));\n    const b = p1.mul(2);\n    return t => a.mul(t**2).add(b.mul(t));\n}\n\n/**\n * Computes the derivative of the function of the quadratic bezier curve.\n *\n * @param {Vec2} p1\n * The control point.\n *\n * @param {Vec2} p2\n * The end point.\n */\nfunction computeDerivative(p1, p2) {\n    const a = p2.mul(2).sub(p1.mul(4));\n    const b = p1.mul(2);\n    return t => a.mul(t).add(b);\n}\n\n/**\n * Computes the point and slope of the function at the given value.\n *\n * @param {Function} f\n * The function of the curve.\n *\n * @param {Function} df\n * The derivative of the function.\n *\n * @param {Number} t\n * How to move far along the line. 0 represents the start point (0, 0) and 1 is\n * the end point.\n */\nfunction computePosAndAngle(f, df, t) {\n    const slope = df(t);\n    return {\n        pos:   f(t),\n        angle: Math.atan2(slope.y, slope.x),\n    };\n}\n"
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The position of the target node."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeControlPoint",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~computeControlPoint",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": null,
    "description": "Computes the coordinates of the control point in the regular coordinate\nsystem.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The end point of the line."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "controlPoint",
        "description": "The description of the control point from the configuration."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeFunction",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~computeFunction",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": null,
    "description": "Computes the function of the quadratic bezier curve.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "The control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "The end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeDerivative",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~computeDerivative",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": null,
    "description": "Computes the derivative of the function of the quadratic bezier curve.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "The control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "The end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computePosAndAngle",
    "memberof": "src/edge/lineStyles/quadraticStyle.js",
    "longname": "src/edge/lineStyles/quadraticStyle.js~computePosAndAngle",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/lineStyles/quadraticStyle.js",
    "importStyle": null,
    "description": "Computes the point and slope of the function at the given value.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function of the curve."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "df",
        "description": "The derivative of the function."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "How to move far along the line. 0 represents the start point (0, 0) and 1 is\nthe end point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/edge/visualizer.js",
    "memberof": null,
    "longname": "src/edge/visualizer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash\";\n\nimport {Vec2} from \"@ignavia/ella\";\n\nimport EdgeGraphic   from \"./EdgeGraphic.js\";\nimport registry      from \"../registry.js\";\nimport * as utils    from \"../utils.js\";\n\n/**\n * The default configuration of this visualizer.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The configuration of the line style.\n     *\n     * @type {Object}\n     */\n    lineStyle: {\n\n        /**\n         * The function to call to draw the line.\n         *\n         * @type {String}\n         */\n        type: \"linear\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {},\n    },\n\n    /**\n     * The configuration of the decal style.\n     *\n     * @type {Object}\n     */\n    decalStyle: {\n\n        /**\n         * The function to call to make the decal.\n         *\n         * @type {String}\n         */\n        type: \"empty\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {},\n    },\n\n    /**\n     * The configuration of the arrow style.\n     *\n     * @type {Object}\n     */\n    arrowStyle: {\n\n        /**\n         * The function to call to make the arrow.\n         *\n         * @type {String}\n         */\n        type: \"triangle\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {},\n    },\n\n     /**\n     * The configuration of the behaviors to use.\n     *\n     * @type {Array<Object>}\n     */\n    behaviors: [{\n\n        /**\n         * The function to call to add the behavior.\n         *\n         * @type {String}\n         */\n        type: \"empty\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {},\n    }],\n\n    /**\n     * How to scale the decal. x- and y-scales can be set seperately. If the\n     * width or height is set, those values are used instead.\n     *\n     * @type {Number|Vec2}\n     */\n    scale: 1,\n\n    /**\n     * The width of the decal. Set this to \"orig\" to use the width of the\n     * original decal and to \"auto\" to keep the aspect ratio when setting\n     * the height.\n     *\n     * @type {Number|String}\n     */\n    width: \"orig\",\n\n    /**\n     * The height of the decal. Set this to \"orig\" to use the height of the\n     * original decal and to \"auto\" to keep the aspect ratio when setting\n     * the width.\n     *\n     * @type {Number|String}\n     */\n    height: \"orig\",\n\n    /**\n     * The rotation angle of the display object.\n     *\n     * @type {Number}\n     */\n    rotation: 0\n};\n\n/**\n * Makes a sprite with behavior and positions, rotates and scales it according\n * to the given configuration. This function is curried.\n *\n * @param {Vec2} sourcePos\n * The position of the source node.\n *\n * @param {Vec2} targetPos\n * The position of the target node.\n *\n * @param {Object} conf\n * The configuration of the visualizer. Check the default configuration to see\n * the structure of this object.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport default function makeEnhancedSprite(sourcePos, targetPos, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const result = makeContainer(conf, sourcePos, targetPos);\n\n    for (let behavior of conf.behaviors) {\n        const behaviorFunction = registry.get([\"edge\", \"behavior\", behavior.type]);\n        behaviorFunction(result, behavior.conf);\n    }\n\n    utils.setPosition(sourcePos, result);\n    result.hitArea = utils.computeHitArea(result.getDecal());\n\n    return result;\n};\n\n/**\n * Creates container used to make the final sprite.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @param {Vec2} sourcePos\n * The position of the source node.\n *\n * @param {Vec2} targetPos\n * The position of the target node.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nfunction makeContainer(conf, sourcePos, targetPos) {\n\n    // Make the line\n    const lineStyle = registry.get([\"edge\", \"lineStyle\", conf.lineStyle.type]);\n    const line      = lineStyle(targetPos.sub(sourcePos), conf.lineStyle.conf);\n\n    // Make the decal\n    const decalStyle = registry.get([\"edge\", \"decalStyle\", conf.decalStyle.type]);\n    const decal      = decalStyle(conf.decalStyle.conf);\n    utils.setScale(conf.scale, decal);\n    utils.setBounds(conf.width, conf.height, decal);\n    utils.setRotation(conf.rotation, decal);\n    rotateDecal(line.decal.angle, decal);\n    utils.setPosition(line.decal.pos, decal);\n\n    // Make the arrow\n    const arrowStyle = registry.get([\"edge\", \"arrowStyle\", conf.arrowStyle.type]);\n    const arrow      = arrowStyle(conf.arrowStyle.conf);\n    utils.setPosition(line.arrow.pos, arrow);\n    utils.setRotation(line.arrow.angle, arrow);\n\n    return new EdgeGraphic(arrow, decal, line);\n}\n\n/**\n * Rotates the given decal using the suggested angle.\n *\n * @param {Number} suggestedAngle\n * The angle to rotate by. This is adjusted by the function to make the decal\n * more readable.\n *\n * @param {DisplayObject} decal\n * The display object to rotate.\n */\nfunction rotateDecal(suggestedAngle, decal) {\n    if (decal.rotateToLine) {\n        if (suggestedAngle < 0) {\n            suggestedAngle += 2 * Math.PI;\n        }\n        if (Math.PI / 2 < suggestedAngle && suggestedAngle < 1.5 * Math.PI) {\n            utils.setRotation(suggestedAngle + Math.PI, decal);\n        } else {\n            utils.setRotation(suggestedAngle, decal);\n        }\n    }\n}\n"
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/edge/visualizer.js",
    "longname": "src/edge/visualizer.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/visualizer.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this visualizer.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeEnhancedSprite",
    "memberof": "src/edge/visualizer.js",
    "longname": "src/edge/visualizer.js~makeEnhancedSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/edge/visualizer.js",
    "importStyle": "makeEnhancedSprite",
    "description": "Makes a sprite with behavior and positions, rotates and scales it according\nto the given configuration. This function is curried.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcePos",
        "description": "The position of the source node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The position of the target node."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the visualizer. Check the default configuration to see\nthe structure of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeContainer",
    "memberof": "src/edge/visualizer.js",
    "longname": "src/edge/visualizer.js~makeContainer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/visualizer.js",
    "importStyle": null,
    "description": "Creates container used to make the final sprite.",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcePos",
        "description": "The position of the source node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "targetPos",
        "description": "The position of the target node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rotateDecal",
    "memberof": "src/edge/visualizer.js",
    "longname": "src/edge/visualizer.js~rotateDecal",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/edge/visualizer.js",
    "importStyle": null,
    "description": "Rotates the given decal using the suggested angle.",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "suggestedAngle",
        "description": "The angle to rotate by. This is adjusted by the function to make the decal\nmore readable."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "decal",
        "description": "The display object to rotate."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/filters/CartesianFisheye.js",
    "memberof": null,
    "longname": "src/filters/CartesianFisheye.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2} from \"@ignavia/ella\";\n\n/**\n * The source of the fragment shader.\n *\n * @type {string}\n * @ignore\n */\nconst fragmentSrc = `\n    precision mediump float;\n\n    uniform sampler2D uSampler;\n    uniform float base;\n    uniform vec2  focus;\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    float distortDistance(float distance) {\n        return (pow(base, distance) - 1.) / (base - 1.);\n    }\n\n    float distortDirection(float focusCoord, float vCoord) {\n        float intersection = vCoord < focusCoord ? 0. : 1.;\n        float distance     = (vCoord - focusCoord) / (intersection - focusCoord);\n        return focusCoord + distortDistance(distance) * (intersection - focusCoord);\n    }\n\n    vec2 distort(vec2 v) {\n        return vec2(\n            distortDirection(focus.x, v.x),\n            distortDirection(focus.y, v.y)\n        );\n    }\n\n    void main(void) {\n        gl_FragColor = texture2D(uSampler, distort(vTextureCoord));\n    }\n`;\n\n/**\n * A cartesian fisheye filter.\n */\nexport default class CartesianFisheye extends PIXI.AbstractFilter {\n\n    /**\n     *\n     */\n    constructor() {\n        super(null, fragmentSrc, {\n            base: {\n                type: \"1f\",\n                value: 2\n            },\n            focus: {\n                type: \"v2\",\n                value: { x: 0.5, y: 0.5 }\n            }\n        });\n    }\n\n    /**\n     * Returns the value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @return {number}\n     * The value of the distortion function at x = 0.5.\n     */\n    get centerHeight() {\n        const base = this.uniforms.base.value;\n        return 1 / (base**0.5 + 1);\n    }\n\n    /**\n     * Sets the value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @param {number} y\n     * The value of the distortion function at x = 0.5.\n     */\n    set centerHeight(y) {\n        this.uniforms.base.value = (1 / y - 1)**2;\n    }\n\n    /**\n     * Returns the coordinates of the focus.\n     *\n     * @return {Vec2}\n     * The coordinates of the focus.\n     */\n    get focus() {\n        return new Vec2(\n            this.uniforms.focus.value.x,\n            this.uniforms.focus.value.y\n        );\n    }\n\n    /**\n     * Sets the coordinates of the focus.\n     *\n     * @param {Vec2} focus\n     * The coordinates of the focus.\n     */\n    set focus(focus) {\n        this.uniforms.focus.value = focus;\n    }\n}\n\n/**\n * An instance of this filter.\n *\n * @type {CartesianFisheye}\n */\nexport const instance = new CartesianFisheye();\n"
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fragmentSrc",
    "memberof": "src/filters/CartesianFisheye.js",
    "longname": "src/filters/CartesianFisheye.js~fragmentSrc",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/filters/CartesianFisheye.js",
    "importStyle": null,
    "description": "The source of the fragment shader.",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CartesianFisheye",
    "memberof": "src/filters/CartesianFisheye.js",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/filters/CartesianFisheye.js",
    "importStyle": "CartesianFisheye",
    "description": "A cartesian fisheye filter.",
    "lineNumber": 44,
    "interface": false,
    "extends": [
      "PIXI~PIXI.AbstractFilter"
    ]
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye#constructor",
    "access": null,
    "description": "",
    "lineNumber": 49,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "centerHeight",
    "memberof": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye#centerHeight",
    "access": null,
    "description": "Returns the value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border.",
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The value of the distortion function at x = 0.5."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "centerHeight",
    "memberof": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye#centerHeight",
    "access": null,
    "description": "Sets the value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The value of the distortion function at x = 0.5."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "focus",
    "memberof": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye#focus",
    "access": null,
    "description": "Returns the coordinates of the focus.",
    "lineNumber": 91,
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The coordinates of the focus."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "focus",
    "memberof": "src/filters/CartesianFisheye.js~CartesianFisheye",
    "longname": "src/filters/CartesianFisheye.js~CartesianFisheye#focus",
    "access": null,
    "description": "Sets the coordinates of the focus.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "focus",
        "description": "The coordinates of the focus."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "instance",
    "memberof": "src/filters/CartesianFisheye.js",
    "longname": "src/filters/CartesianFisheye.js~instance",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/filters/CartesianFisheye.js",
    "importStyle": "{instance}",
    "description": "An instance of this filter.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "CartesianFisheye"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/filters/PolarFisheye.js",
    "memberof": null,
    "longname": "src/filters/PolarFisheye.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2} from \"@ignavia/ella\";\n\n/**\n * The source of the fragment shader.\n *\n * @type {string}\n * @ignore\n */\nconst fragmentSrc = `\n    precision mediump float;\n\n    uniform sampler2D uSampler;\n    uniform float base;\n    uniform float radius;\n    uniform vec2  focus;\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    float distortDistance(float distance) {\n        return (pow(base, distance) - 1.) / (base - 1.);\n    }\n\n    vec2 distort(vec2 v) {\n        vec2 connector = v - focus;\n        float length   = length(connector);\n        if (length >= radius || length == 0.) {\n            return v;\n        } else {\n            return focus + distortDistance(length / radius) * (connector / length * radius);\n        }\n    }\n\n    void main(void) {\n        gl_FragColor = texture2D(uSampler, distort(vTextureCoord));\n    }\n`;\n\n/**\n * A polar fisheye filter.\n */\nexport default class PolarFisheye extends PIXI.AbstractFilter {\n\n    /**\n     *\n     */\n    constructor() {\n        super(null, fragmentSrc, {\n            base: {\n                type: \"1f\",\n                value: 2\n            },\n            radius: {\n                type: \"1f\",\n                value: 1,\n            },\n            focus: {\n                type: \"v2\",\n                value: { x: 0.5, y: 0.5 }\n            },\n        });\n    }\n\n    /**\n     * Returns the value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @return {number}\n     * The value of the distortion function at x = 0.5.\n     */\n    get centerHeight() {\n        const base = this.uniforms.base.value;\n        return 1 / (base**0.5 + 1);\n    }\n\n    /**\n     * Sets the value of the distortion function at x = 0.5. This is the\n     * place halfway between the focus point and the border.\n     *\n     * @param {number} y\n     * The value of the distortion function at x = 0.5.\n     */\n    set centerHeight(y) {\n        this.uniforms.base.value = (1 / y - 1)**2;\n    }\n\n    /**\n     * Returns the radius of the effect.\n     *\n     * @return {number}\n     * The radius of the effect.\n     */\n    get radius() {\n        return this.uniforms.radius.value;\n    }\n\n    /**\n     * Sets the radius of the effect.\n     *\n     * @param {number} radius\n     * The radius of the effect.\n     */\n    set radius(radius) {\n        this.uniforms.radius.value = radius;\n    }\n\n    /**\n     * Returns the coordinates of the focus.\n     *\n     * @return {Vec2}\n     * The coordinates of the focus.\n     */\n    get focus() {\n        return new Vec2(\n            this.uniforms.focus.value.x,\n            this.uniforms.focus.value.y\n        );\n    }\n\n    /**\n     * Sets the coordinates of the focus.\n     *\n     * @param {Vec2} focus\n     * The coordinates of the focus.\n     */\n    set focus(focus) {\n        this.uniforms.focus.value = focus;\n    }\n}\n\n/**\n * An instance of this filter.\n *\n * @type {PolarFisheye}\n */\nexport const instance = new PolarFisheye();\n"
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fragmentSrc",
    "memberof": "src/filters/PolarFisheye.js",
    "longname": "src/filters/PolarFisheye.js~fragmentSrc",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/filters/PolarFisheye.js",
    "importStyle": null,
    "description": "The source of the fragment shader.",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PolarFisheye",
    "memberof": "src/filters/PolarFisheye.js",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/filters/PolarFisheye.js",
    "importStyle": "PolarFisheye",
    "description": "A polar fisheye filter.",
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "PIXI~PIXI.AbstractFilter"
    ]
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#constructor",
    "access": null,
    "description": "",
    "lineNumber": 47,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "centerHeight",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#centerHeight",
    "access": null,
    "description": "Returns the value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border.",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The value of the distortion function at x = 0.5."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "centerHeight",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#centerHeight",
    "access": null,
    "description": "Sets the value of the distortion function at x = 0.5. This is the\nplace halfway between the focus point and the border.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The value of the distortion function at x = 0.5."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "radius",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#radius",
    "access": null,
    "description": "Returns the radius of the effect.",
    "lineNumber": 93,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The radius of the effect."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "radius",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#radius",
    "access": null,
    "description": "Sets the radius of the effect.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "The radius of the effect."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "focus",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#focus",
    "access": null,
    "description": "Returns the coordinates of the focus.",
    "lineNumber": 113,
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The coordinates of the focus."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "focus",
    "memberof": "src/filters/PolarFisheye.js~PolarFisheye",
    "longname": "src/filters/PolarFisheye.js~PolarFisheye#focus",
    "access": null,
    "description": "Sets the coordinates of the focus.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "focus",
        "description": "The coordinates of the focus."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "instance",
    "memberof": "src/filters/PolarFisheye.js",
    "longname": "src/filters/PolarFisheye.js~instance",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/filters/PolarFisheye.js",
    "importStyle": "{instance}",
    "description": "An instance of this filter.",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "PolarFisheye"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/filters/filters.js",
    "memberof": null,
    "longname": "src/filters/filters.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export CartesianFisheye, {instance as cartesianFisheye} from \"./CartesianFisheye.js\";\nexport PolarFisheye,     {instance as polarFisheye}     from \"./PolarFisheye.js\";\nexport Scaling,          {instance as scaling}          from \"./Scaling.js\";\nexport Transparency,     {instance as transparency}     from \"./Transparency.js\";\n"
  },
  {
    "__docId__": 148,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/behaviors/emptyBehavior.js",
    "memberof": null,
    "longname": "src/graph/behaviors/emptyBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry from \"../../registry.js\";\n\n/**\n * Does absolutely nothing.\n *\n * @param {DisplayObject} stage\n * The stage hosting the node and edge graphics.\n *\n * @param {Renderer} renderer\n * The renderer in use.\n */\nexport default function addBehavior(stage, renderer) {}\nregistry.addGraphBehavior(\"empty\", addBehavior);"
  },
  {
    "__docId__": 149,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/graph/behaviors/emptyBehavior.js",
    "longname": "src/graph/behaviors/emptyBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/emptyBehavior.js",
    "importStyle": "addBehavior",
    "description": "Does absolutely nothing.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The stage hosting the node and edge graphics."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer in use."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/behaviors/interactiveBehavior.js",
    "memberof": null,
    "longname": "src/graph/behaviors/interactiveBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this behavior.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * Is triggered when the mouse moves onto the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseover: () => {},\n\n    /**\n     * Is triggered when the mouse leaves the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseout: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is pressed when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMousedown: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is released when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseup: () => {},\n\n    /**\n     * Is triggered right after the mouseup event.\n     *\n     * @type {Function}\n     */\n    handleClick: () => {},\n\n    /**\n     * Is triggered when the display object is touched.\n     *\n     * @type {Function}\n     */\n    handleTouchstart: () => {},\n\n    /**\n     * Is triggered when the display object is no longer touched.\n     *\n     * @type {Function}\n     */\n    handleTouchend: () => {},\n\n    /**\n     * Is triggered right after the touchend event.\n     *\n     * @type {Function}\n     */\n    handleTap: () => {},\n};\n\n/**\n * Adds event handlers to the given display object.\n *\n * @param {DisplayObject} stage\n * The stage hosting the node and edge graphics.\n *\n * @param {Renderer} renderer\n * The renderer in use.\n *\n * @param {Object} [conf]\n * Contains the event handlers to add. Check the documentation of the default\n * configuration to see how this object is structured.\n */\nexport default function addBehavior(stage, renderer, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    utils.addInteraction(conf, stage);\n};\nregistry.addGraphBehavior(\"interactive\", addBehavior);\n"
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/graph/behaviors/interactiveBehavior.js",
    "longname": "src/graph/behaviors/interactiveBehavior.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/interactiveBehavior.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this behavior.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/graph/behaviors/interactiveBehavior.js",
    "longname": "src/graph/behaviors/interactiveBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/interactiveBehavior.js",
    "importStyle": "addBehavior",
    "description": "Adds event handlers to the given display object.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The stage hosting the node and edge graphics."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer in use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Contains the event handlers to add. Check the documentation of the default\nconfiguration to see how this object is structured."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/behaviors/panBehavior.js",
    "memberof": null,
    "longname": "src/graph/behaviors/panBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import $ from \"jquery\";\n\nimport registry from \"../../registry.js\";\n\n/**\n * Adds this behavior to the given stage and renderer.\n *\n * @param {DisplayObject} stage\n * The stage to move while panning.\n *\n * @param {Renderer} renderer\n * The renderer to add the event listener to.\n */\nexport default function addBehavior(stage, renderer) {\n    $(renderer.view).mousedown((e) => {\n        stage.lastPos = {x: e.offsetX, y: e.offsetY};\n    }).mouseup((e) => {\n        stage.lastPos = undefined;\n    }).mousemove((e) => {\n        if (stage.lastPos) {\n            stage.x      += e.offsetX - stage.lastPos.x;\n            stage.y      += e.offsetY - stage.lastPos.y;\n            stage.lastPos = {x: e.offsetX, y: e.offsetY};\n        }\n    }).mouseleave((e) => {\n        stage.lastPos = undefined;\n    });\n};\nregistry.addGraphBehavior(\"pan\", addBehavior);\n"
  },
  {
    "__docId__": 154,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/graph/behaviors/panBehavior.js",
    "longname": "src/graph/behaviors/panBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/panBehavior.js",
    "importStyle": "addBehavior",
    "description": "Adds this behavior to the given stage and renderer.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The stage to move while panning."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer to add the event listener to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/behaviors/zoomBehavior.js",
    "memberof": null,
    "longname": "src/graph/behaviors/zoomBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import $          from \"jquery\";\nimport mousewheel from \"jquery-mousewheel\";\nmousewheel($);\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this behavior.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The zoom factor to apply when the mousewheel is used. When zooming in,\n     * the scale of the stage is multiplied by this value, when zooming out,\n     * it is divided by it.\n     *\n     * @type {Number}\n     */\n    zoomFactor: 1.1,\n\n    /**\n     * The maximum x-scale of the stage.\n     *\n     * @type {Number}\n     */\n    maxScaleX: 1,\n\n    /**\n     * The minimum x-scale of the stage.\n     *\n     * @type {Number}\n     */\n    minScaleX: 0.1,\n\n    /**\n     * The maximum y-scale of the stage.\n     *\n     * @type {Number}\n     */\n    maxScaleY: 1,\n\n    /**\n     * The minimum y-scale of the stage.\n     *\n     * @type {Number}\n     */\n    minScaleY: 0.1\n};\n\n/**\n * Adds this behavior to the given stage and renderer.\n *\n * @param {DisplayObject} stage\n * The stage to scale when zooming.\n *\n * @param {Renderer} renderer\n * The renderer to add the event listener to.\n *\n * @param {Object} [conf]\n * The configuration of this behavior. Check the default configuration for the\n * structure of this document.\n */\nexport default function addBehavior(stage, renderer, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    $(renderer.view).mousewheel(e => {\n        if (e.deltaY !== 0) {\n            zoom(conf, stage, renderer, e.deltaY < 0 ? \"out\" : \"in\");\n        }\n    });\n};\nregistry.addGraphBehavior(\"zoom\", addBehavior);\n\n/**\n * The actual zoom function. It applies the zoom factor and moves the stage to\n * create the illusion that the program zooms onto the mouse pointer.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @param {DisplayObject} stage\n * The display object that is being scaled.\n *\n * @param {Renderer} renderer\n * The renderer used to display the stage.\n *\n * @param {String} direction\n * This is either \"in\" or \"out\" and it specifies whether the stage should be\n * shrunk or enlarged.\n */\nfunction zoom(conf, stage, renderer, direction) {\n    const sign   = direction === \"in\" ? 1 : -1,\n          factor = conf.zoomFactor**sign;\n\n    if (scaleOutOfBounds(conf, stage, factor)) {\n        return;\n    }\n\n    const beforeTransform = renderer.plugins.interaction.mouse.getLocalPosition(stage);\n\n    stage.scale.x *= factor;\n    stage.scale.y *= factor;\n\n    const afterTransform = {\n        x: beforeTransform.x / factor,\n        y: beforeTransform.y / factor\n    };\n\n    // Move stage to zoom where the mouse pointer is\n    stage.position.x += (afterTransform.x - beforeTransform.x) * stage.scale.x;\n    stage.position.y += (afterTransform.y - beforeTransform.y) * stage.scale.y;\n}\n\n/**\n * Checks if the new scale after applying the zoom factor is out of the bounds\n * specified in the configuration.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @param {DisplayObject} stage\n * The display object that is getting zoomed.\n *\n * @param {Number} factor\n * The zoom factor to apply.\n *\n * @return {Boolean}\n * Whether the new scale would be invalid.\n */\nfunction scaleOutOfBounds(conf, stage, factor) {\n    return scaleDimensionOutOfBounds(stage.scale.x * factor, conf.minScaleX, conf.maxScaleX) ||\n           scaleDimensionOutOfBounds(stage.scale.y * factor, conf.minScaleY, conf.maxScaleY);\n}\n\n/**\n * Checks if the given value is no longer within the given minimum and maximum\n * value.\n *\n * @param {Number} current\n * The current scale in either x- or y-direction.\n *\n * @param {Number} min\n * The minimum acceptable value.\n *\n * @param {Number} max\n * The maximum acceptable value.\n *\n * @return {Boolean}\n * Whether the new scale would be invalid.\n */\nfunction scaleDimensionOutOfBounds(current, min, max) {\n    return current < min * 0.99 || current > max * 1.01;\n}\n"
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/graph/behaviors/zoomBehavior.js",
    "longname": "src/graph/behaviors/zoomBehavior.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/zoomBehavior.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this behavior.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/graph/behaviors/zoomBehavior.js",
    "longname": "src/graph/behaviors/zoomBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/behaviors/zoomBehavior.js",
    "importStyle": "addBehavior",
    "description": "Adds this behavior to the given stage and renderer.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The stage to scale when zooming."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer to add the event listener to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "The configuration of this behavior. Check the default configuration for the\nstructure of this document."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "zoom",
    "memberof": "src/graph/behaviors/zoomBehavior.js",
    "longname": "src/graph/behaviors/zoomBehavior.js~zoom",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/behaviors/zoomBehavior.js",
    "importStyle": null,
    "description": "The actual zoom function. It applies the zoom factor and moves the stage to\ncreate the illusion that the program zooms onto the mouse pointer.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The display object that is being scaled."
      },
      {
        "nullable": null,
        "types": [
          "Renderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": "The renderer used to display the stage."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "This is either \"in\" or \"out\" and it specifies whether the stage should be\nshrunk or enlarged."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "scaleOutOfBounds",
    "memberof": "src/graph/behaviors/zoomBehavior.js",
    "longname": "src/graph/behaviors/zoomBehavior.js~scaleOutOfBounds",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/behaviors/zoomBehavior.js",
    "importStyle": null,
    "description": "Checks if the new scale after applying the zoom factor is out of the bounds\nspecified in the configuration.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The display object that is getting zoomed."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "factor",
        "description": "The zoom factor to apply."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the new scale would be invalid."
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "scaleDimensionOutOfBounds",
    "memberof": "src/graph/behaviors/zoomBehavior.js",
    "longname": "src/graph/behaviors/zoomBehavior.js~scaleDimensionOutOfBounds",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/behaviors/zoomBehavior.js",
    "importStyle": null,
    "description": "Checks if the given value is no longer within the given minimum and maximum\nvalue.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "The current scale in either x- or y-direction."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum acceptable value."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum acceptable value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the new scale would be invalid."
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/graph.js",
    "memberof": null,
    "longname": "src/graph/graph.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export graphVisualizer          from \"./visualizer.js\";\nexport graphStyle               from \"./styles/style.js\";\nexport graphEmptyBehavior       from \"./behaviors/emptyBehavior.js\";\nexport graphInteractiveBehavior from \"./behaviors/interactiveBehavior.js\";\nexport graphPanBehavior         from \"./behaviors/panBehavior.js\";\nexport graphZoomBehavior        from \"./behaviors/zoomBehavior.js\";\n"
  },
  {
    "__docId__": 162,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/styles/style.js",
    "memberof": null,
    "longname": "src/graph/styles/style.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2}             from \"@ignavia/ella\";\nimport {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n */\nexport const defaultConf = {\n\n    /**\n     * The background color of the stage.\n     *\n     * @type {Color}\n     */\n    backgroundColor: predefinedColors.white,\n\n    /**\n     * The drop shadow to apply to nodes. Set the distance to 0 to disable it.\n     *\n     * @type {Object}\n     */\n    nodeDropShadow: {\n\n        /**\n         * The angle of the drop shadow in radians.\n         *\n         * @type {Number}\n         */\n        angle: Math.PI / 4,\n\n        /**\n         * The blur to apply to the drop shadow.\n         *\n         * @type {Vec2}\n         */\n        blur: new Vec2(4, 4),\n\n        /**\n         * The color of the drop shadow.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.gray,\n\n        /**\n         * How long the drop shadow is.\n         *\n         * @type {Number}\n         */\n        distance: 5,\n    },\n\n    /**\n     * Configures the renderer to use.\n     *\n     * @type {Object}\n     */\n    renderer: {\n\n        /**\n         * The width of the renderer.\n         *\n         * @type {Number}\n         */\n        width: screen.width,\n\n        /**\n         * The height of the renderer.\n         *\n         * @type {Number}\n         */\n        height: screen.height,\n\n        /**\n         * The type of the renderer. Use \"auto\" to use WebGL if available and\n         * canvas otherwise or set this directly to \"webGL\" or \"canvas\".\n         *\n         * @type {String}\n         */\n        type: \"auto\",\n\n        /**\n         * The resolution to use.\n         *\n         * @type {Number}\n         */\n        resolution: window.devicePixelRatio || 1,\n\n        /**\n         * Whether to automatically resize the renderer.\n         *\n         * @type {Boolean}\n         */\n        autoResize: true,\n    }\n};\n\n/**\n * Creates renderer, stage, nodeContainer and edgeContainers based on the\n * default confguration. All those are bundled in an object and returned.\n *\n * @param {Object} [conf]\n * The configuration to use.\n *\n * @return {Object}\n * The created object.\n */\nexport default function makeView(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const stage                 = new PIXI.Container();\n\n    const edges                 = new PIXI.Container();\n    const selectedEdgeContainer = new PIXI.Container();\n    const edgeContainer         = new PIXI.Container();\n    edges.addChild(edgeContainer);\n    edges.addChild(selectedEdgeContainer);\n    stage.addChild(edges);\n\n    const nodes                 = new PIXI.Container();\n    const selectedNodeContainer = new PIXI.Container();\n    const nodeContainer         = new PIXI.Container();\n    nodes.addChild(nodeContainer);\n    nodes.addChild(selectedNodeContainer);\n    stage.addChild(nodes);\n\n    // Add filters\n    selectedNodeContainer.filters = [makeDropShadow(conf, 2)];\n    nodeContainer.filters         = [makeDropShadow(conf)];\n    selectedEdgeContainer.filters = [makeDropShadow(conf)];\n\n    return {\n        renderer: makeRenderer(conf),\n        stage,\n        selectedNodeContainer,\n        nodeContainer,\n        selectedEdgeContainer,\n        edgeContainer,\n    };\n}\nregistry.addGraphStyle(\"default\", makeView);\n\n/**\n * Creates a renderer using the given configuration.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @return {Renderer}\n * The created renderer.\n */\nfunction makeRenderer(conf) {\n    switch (conf.renderer.type) {\n    case \"auto\":\n        return makeAutoDetectedRenderer(conf);\n    case \"webGL\":\n        return makeWebGLRenderer(conf);\n    case \"canvas\":\n        return makeCanvasRenderer(conf);\n    }\n}\n\n/**\n * Creates a WebGL renderer if available, otherwise a canvas renderer.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @return {Renderer}\n * The created renderer.\n */\nfunction makeAutoDetectedRenderer(conf) {\n    return PIXI.autoDetectRenderer(conf.renderer.width, conf.renderer.height, {\n        autoResize:      conf.renderer.autoResize,\n        resolution:      conf.renderer.resolution,\n        backgroundColor: conf.backgroundColor.hex\n    });\n}\n\n/**\n * Creates a WebGL renderer using the given configuration.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @return {Renderer}\n * The created renderer.\n */\nfunction makeWebGLRenderer(conf) {\n    return new PIXI.WebGLRenderer(conf.renderer.width, conf.renderer.height, {\n        autoResize:      conf.renderer.autoResize,\n        resolution:      conf.renderer.resolution,\n        backgroundColor: conf.backgroundColor.hex\n    });\n}\n\n/**\n * Creates a canvas renderer using the given configuration.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @return {Renderer}\n * The created renderer.\n */\nfunction makeCanvasRenderer(conf) {\n    return new PIXI.CanvasRenderer(conf.renderer.width, conf.renderer.height, {\n        autoResize:      conf.renderer.autoResize,\n        resolution:      conf.renderer.resolution,\n        backgroundColor: conf.backgroundColor.hex\n    });\n}\n\n/**\n * Creates a drop shadow filter based on the given configuration.\n *\n * @param {Object} conf\n * The configuration to use.\n *\n * @param {Number} factor\n * The factor to multiply the distance and blur values by.\n *\n * @return {Filter}\n * The created filter.\n */\nfunction makeDropShadow(conf, factor = 1) {\n    const dropShadow    = new PIXI.filters.DropShadowFilter();\n    dropShadow.color    = conf.nodeDropShadow.color.hex;\n    dropShadow.alpha    = conf.nodeDropShadow.color.alpha;\n    dropShadow.angle    = conf.nodeDropShadow.angle;\n    dropShadow.blurX    = conf.nodeDropShadow.blur.x * factor;\n    dropShadow.blurY    = conf.nodeDropShadow.blur.y * factor;\n    dropShadow.distance = conf.nodeDropShadow.distance * factor;\n    return dropShadow;\n}\n"
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeView",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeView",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": "makeView",
    "description": "Creates renderer, stage, nodeContainer and edgeContainers based on the\ndefault confguration. All those are bundled in an object and returned.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "The configuration to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The created object."
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeRenderer",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeRenderer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": null,
    "description": "Creates a renderer using the given configuration.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": "The created renderer."
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeAutoDetectedRenderer",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeAutoDetectedRenderer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": null,
    "description": "Creates a WebGL renderer if available, otherwise a canvas renderer.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": "The created renderer."
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeWebGLRenderer",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeWebGLRenderer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": null,
    "description": "Creates a WebGL renderer using the given configuration.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": "The created renderer."
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeCanvasRenderer",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeCanvasRenderer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": null,
    "description": "Creates a canvas renderer using the given configuration.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": "The created renderer."
    },
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeDropShadow",
    "memberof": "src/graph/styles/style.js",
    "longname": "src/graph/styles/style.js~makeDropShadow",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/graph/styles/style.js",
    "importStyle": null,
    "description": "Creates a drop shadow filter based on the given configuration.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "factor",
        "description": "The factor to multiply the distance and blur values by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Filter"
      ],
      "spread": false,
      "description": "The created filter."
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/graph/visualizer.js",
    "memberof": null,
    "longname": "src/graph/visualizer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry   from \"../registry.js\";\nimport * as utils from \"../utils.js\";\n\n/**\n * The default configuration of this visualizer.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The style to use to create the stage and renderer.\n     *\n     * @type {Object}\n     */\n    style: {\n\n        /**\n         * The function to call to make the stage and renderer.\n         *\n         * @type {String}\n         */\n        type: \"default\",\n\n        /**\n         * The configuration to pass to that function.\n         *\n         * @type {Object}\n         */\n        conf: {}\n    },\n\n    /**\n     * The behaviors to add to the stage.\n     *\n     * @type {Array<Object>}\n     */\n    behaviors: [{\n\n        /**\n         * The function to call to add the behavior.\n         *\n         * @type {String}\n         */\n        type: \"zoom\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {}\n    }, {\n\n        /**\n         * The function to call to add the behavior.\n         *\n         * @type {String}\n         */\n        type: \"pan\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {}\n    }]\n};\n\n/**\n * Creates the renderer, the sprite and containers for nodes and edges and adds\n * behavior to those.\n *\n * @param {Object} conf\n * The configuration to use. Check the default configuration for the structure\n * of this object.\n */\nexport default function makeEnhancedView(conf = {})  {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const style  = registry.get([\"graph\", \"style\", conf.style.type]);\n    const result = style(conf.style.conf);\n    for (let behavior of conf.behaviors) {\n        const behaviorFunction = registry.get([\"graph\", \"behavior\", behavior.type]);\n        behaviorFunction(result.stage, result.renderer, behavior.conf);\n    }\n\n    return result;\n}\n"
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/graph/visualizer.js",
    "longname": "src/graph/visualizer.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/visualizer.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this visualizer.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeEnhancedView",
    "memberof": "src/graph/visualizer.js",
    "longname": "src/graph/visualizer.js~makeEnhancedView",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/graph/visualizer.js",
    "importStyle": "makeEnhancedView",
    "description": "Creates the renderer, the sprite and containers for nodes and edges and adds\nbehavior to those.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration to use. Check the default configuration for the structure\nof this object."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/behaviors/emptyBehavior.js",
    "memberof": null,
    "longname": "src/node/behaviors/emptyBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry from \"../../registry.js\";\n\n/**\n * Does absolutely nothing.\n *\n * @param {DisplayObject} displayObject\n * The display object to add behavior to.\n */\nexport default function addBehavior(displayObject) {}\nregistry.addNodeBehavior(\"empty\", addBehavior);\n"
  },
  {
    "__docId__": 174,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/node/behaviors/emptyBehavior.js",
    "longname": "src/node/behaviors/emptyBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/behaviors/emptyBehavior.js",
    "importStyle": "addBehavior",
    "description": "Does absolutely nothing.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to add behavior to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/behaviors/interactiveBehavior.js",
    "memberof": null,
    "longname": "src/node/behaviors/interactiveBehavior.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this behavior.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * Is triggered when the mouse moves onto the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseover: () => {},\n\n    /**\n     * Is triggered when the mouse leaves the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseout: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is pressed when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMousedown: () => {},\n\n    /**\n     * Is triggered when the left mousebutton is released when the mouse is on\n     * the display object.\n     *\n     * @type {Function}\n     */\n    handleMouseup: () => {},\n\n    /**\n     * Is triggered right after the mouseup event.\n     *\n     * @type {Function}\n     */\n    handleClick: () => {},\n\n    /**\n     * Is triggered when the display object is touched.\n     *\n     * @type {Function}\n     */\n    handleTouchstart: () => {},\n\n    /**\n     * Is triggered when the display object is no longer touched.\n     *\n     * @type {Function}\n     */\n    handleTouchend: () => {},\n\n    /**\n     * Is triggered right after the touchend event.\n     *\n     * @type {Function}\n     */\n    handleTap: () => {},\n};\n\n/**\n * Adds event handlers to the given display object.\n *\n * @param {DisplayObject} displayObject\n * The display object to make interactive.\n *\n * @param {Object} [conf]\n * Contains the event handlers to add. Check the documentation of the default\n * configuration to see how this object is structured.\n */\nexport default function addBehavior(displayObject, conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    utils.addInteraction(conf, displayObject);\n}\nregistry.addNodeBehavior(\"interactive\", addBehavior);\n"
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/behaviors/interactiveBehavior.js",
    "longname": "src/node/behaviors/interactiveBehavior.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/behaviors/interactiveBehavior.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this behavior.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addBehavior",
    "memberof": "src/node/behaviors/interactiveBehavior.js",
    "longname": "src/node/behaviors/interactiveBehavior.js~addBehavior",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/behaviors/interactiveBehavior.js",
    "importStyle": "addBehavior",
    "description": "Adds event handlers to the given display object.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make interactive."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Contains the event handlers to add. Check the documentation of the default\nconfiguration to see how this object is structured."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/node.js",
    "memberof": null,
    "longname": "src/node/node.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export nodeVisualizer          from \"./visualizer.js\";\n\nexport nodeSimpleStyle         from \"./styles/simpleStyle.js\";\nexport nodeLabelledStyle       from \"./styles/labelledStyle.js\";\nexport nodeIllustratedStyle    from \"./styles/illustratedStyle.js\";\nexport nodeTableStyle          from \"./styles/tableStyle.js\";\n\nexport nodeEmptyBehavior       from \"./behaviors/emptyBehavior.js\";\nexport nodeInteractiveBehavior from \"./behaviors/interactiveBehavior.js\";"
  },
  {
    "__docId__": 179,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/styles/illustratedStyle.js",
    "memberof": null,
    "longname": "src/node/styles/illustratedStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * How the box should look like.\n     *\n     * @type {Object}\n     */\n    box: {\n\n        /**\n         * The color to fill the box with.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.white,\n\n        /**\n         * How the border of the box should look.\n         *\n         * @type {Object}\n         */\n        border: {\n\n            /**\n             * The color of the border.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.black,\n\n            /**\n             * The radius of the border. This option only works when the shape is\n             * set to \"roundedRect\".\n             *\n             * @type {Number}\n             */\n            radius: 5,\n\n            /**\n             * The width of the border.\n             *\n             * @type {Number}\n             */\n            width: 2\n        },\n\n        /**\n         * The margin to add around the box. This might be necessary to prevent PIXI\n         * from cutting some pixels of the border off.\n         *\n         * @type {Number}\n         */\n        margin: 2,\n\n        /**\n         * The padding to add around the label.\n         *\n         * @type {Number}\n         */\n        padding: 10,\n\n        /**\n         * The shape of this node. The values \"circle\", \"ellipse\", \"rect\",\n         * \"roundedRect\" are supported.\n         *\n         * @type {String}\n         */\n        shape: \"rect\"\n    },\n\n    /**\n     * Affects the style of the caption.\n     *\n     * @type {Object}\n     */\n    caption: {\n\n        /**\n         * How large the gap between the given display object and the caption should be.\n         *\n         * @type {Number}\n         */\n        gap: 5,\n\n        /**\n         * Where the caption should be positioned in relation to the given display\n         * object. Possible options are \"center\", \"above\", \"right\", \"below\" and \"left\".\n         *\n         * @type {String}\n         */\n        side: \"below\", // below, above, left, right, center, none\n\n        /**\n         * How the text itself should look.\n         *\n         * @type {Object}\n         */\n        text: {\n\n            /**\n             * The caption to display.\n             *\n             * @type {String}\n             */\n            label: \"\",\n\n            /**\n             * How the text should be aligned. The possible values are \"left\", \"center\" and\n             * \"right\". For a single line of text this option has no effect.\n             *\n             * @type {String}\n             */\n            align:  \"left\",\n\n            /**\n             * How the drop shadow of the text should look.\n             *\n             * @type {Object}\n             */\n            dropShadow: {\n\n                /**\n                 * The angle of the drop shadow given in radian. An angle of 0 means that the\n                 * shadow goes to the right, increasing the angle moves the shadow clockwise.\n                 *\n                 * @type {Number}\n                 */\n                angle: Math.PI / 4,\n\n                /**\n                 * The color of the shadow.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.gray,\n\n                /**\n                 * How long the drop shadow should be. Set this to 0 to remove it.\n                 *\n                 * @type {Number}\n                 */\n                distance: 0\n            },\n\n            /**\n             * The color to fill the text with.\n             *\n             * @type {Color}\n             */\n            fillColor: predefinedColors.black,\n\n            /**\n             * Configures the font of the text.\n             *\n             * @type {Object}\n             */\n            font: {\n\n                /**\n                 * The font-family to use.\n                 *\n                 * @type {String}\n                 */\n                family: \"Arial\",\n\n                /**\n                 * The font-size to use.\n                 *\n                 * @type {Number}\n                 */\n                size: 10,\n\n                /**\n                 * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n                 *\n                 * @type {String}\n                 */\n                style: \"normal\",\n\n                /**\n                 * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n                 */\n                weight: \"bold\"\n            },\n\n            /**\n             * How the stroke around the text should look.\n             *\n             * @type {Object}\n             */\n            stroke: {\n\n                /**\n                 * The color of the stroke around the text.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.white,\n\n                /**\n                 * How thick the stroke should be. Set this to 0 to deactivate it.\n                 *\n                 * @type {Number}\n                 */\n                thickness: 0\n            },\n\n            /**\n             * The width at which the text is going to wrap. Set this to 0 to\n             * disable it.\n             *\n             * @type {Number}\n             */\n            wordWrapWidth: 0\n        }\n    },\n\n    /**\n     * How the image should look.\n     *\n     * @type {Object}\n     */\n    image: {\n\n        /**\n         * The path to the image to display.\n         *\n         * @type {String}\n         */\n        path: \"\", // TODO: path to default picture\n\n        /**\n         * The width of the image. Set this to \"orig\" to use the width of the\n         * original image and to \"auto\" to keep the aspect ratio when setting\n         * the height.\n         *\n         * @type {Number|String}\n         */\n        width: \"orig\",\n\n        /**\n         * The height of the image. Set this to \"orig\" to use the height of the\n         * original image and to \"auto\" to keep the aspect ratio when setting\n         * the width.\n         *\n         * @type {Number|String}\n         */\n        height: \"orig\"\n    }\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const container = utils.makeCaptionedImage(conf, conf.image.path, conf.caption.text.label);\n    const box       = utils.makeBox(conf.box, container);\n    const margin    = utils.makeMargin(conf.box.margin, box);\n    container.addChildAt(box, 0);\n    container.addChildAt(margin, 0);\n\n    return utils.makeCanvasSprite(container);\n};\nregistry.addNodeStyle(\"illustrated\", makeSprite);\n"
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/styles/illustratedStyle.js",
    "longname": "src/node/styles/illustratedStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/illustratedStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/node/styles/illustratedStyle.js",
    "longname": "src/node/styles/illustratedStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/illustratedStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/styles/labelledStyle.js",
    "memberof": null,
    "longname": "src/node/styles/labelledStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of the style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * How the box should look like.\n     *\n     * @type {Object}\n     */\n    box: {\n\n        /**\n         * The color to fill the box with.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.white,\n\n        /**\n         * How the border of the box should look.\n         *\n         * @type {Object}\n         */\n        border: {\n\n            /**\n             * The color of the border.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.black,\n\n            /**\n             * The radius of the border. This option only works when the shape is\n             * set to \"roundedRect\".\n             *\n             * @type {Number}\n             */\n            radius: 5,\n\n            /**\n             * The width of the border.\n             *\n             * @type {Number}\n             */\n            width: 2\n        },\n\n        /**\n         * The margin to add around the box. This might be necessary to prevent PIXI\n         * from cutting some pixels of the border off.\n         *\n         * @type {Number}\n         */\n        margin: 2,\n\n        /**\n         * The padding to add around the label.\n         *\n         * @type {Number}\n         */\n        padding: 10,\n\n        /**\n         * The shape of this node. The values \"circle\", \"ellipse\", \"rect\",\n         * \"roundedRect\" are supported.\n         *\n         * @type {String}\n         */\n        shape: \"ellipse\"\n    },\n\n    /**\n     * How the label should look.\n     *\n     * @type {Object}\n     */\n    text: {\n\n        /**\n         * The label to use.\n         *\n         * @type {String}\n         */\n        label: \"\",\n\n        /**\n         * How the text should be aligned. The possible values are \"left\", \"center\" and\n         * \"right\". For a single line of text this option has no effect.\n         *\n         * @type {String}\n         */\n        align:  \"left\",\n\n        /**\n         * How the drop shadow of the text should look.\n         *\n         * @type {Object}\n         */\n        dropShadow: {\n\n            /**\n             * The angle of the drop shadow given in radian. An angle of 0 means that the\n             * shadow goes to the right, increasing the angle moves the shadow clockwise.\n             *\n             * @type {Number}\n             */\n            angle: Math.PI / 4,\n\n            /**\n             * The color of the shadow.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.gray,\n\n            /**\n             * How long the drop shadow should be. Set this to 0 to remove it.\n             *\n             * @type {Number}\n             */\n            distance: 0\n        },\n\n        /**\n         * The color to fill the text with.\n         *\n         * @type {Color}\n         */\n        fillColor: predefinedColors.black,\n\n        /**\n         * Configures the font of the text.\n         *\n         * @type {Object}\n         */\n        font: {\n\n            /**\n             * The font-family to use.\n             *\n             * @type {String}\n             */\n            family: \"Arial\",\n\n            /**\n             * The font-size to use.\n             *\n             * @type {Number}\n             */\n            size: 20,\n\n            /**\n             * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n             *\n             * @type {String}\n             */\n            style: \"normal\",\n\n            /**\n             * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n             */\n            weight: \"bold\"\n        },\n\n        /**\n         * How the stroke around the text should look.\n         *\n         * @type {Object}\n         */\n        stroke: {\n\n            /**\n             * The color of the stroke around the text.\n             *\n             * @type {Color}\n             */\n            color: predefinedColors.white,\n\n            /**\n             * How thick the stroke should be. Set this to 0 to deactivate it.\n             *\n             * @type {Number}\n             */\n            thickness: 0\n        },\n\n        /**\n         * The width at which the text is going to wrap. Set this to 0 to\n         * disable it.\n         *\n         * @type {Number}\n         */\n        wordWrapWidth: 0\n    }\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const container = utils.makeBoxedLabel(conf, conf.text.label);\n\n    return utils.makeCanvasSprite(container);\n};\nregistry.addNodeStyle(\"labelled\", makeSprite);\n"
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/styles/labelledStyle.js",
    "longname": "src/node/styles/labelledStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/labelledStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of the style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/node/styles/labelledStyle.js",
    "longname": "src/node/styles/labelledStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/labelledStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/styles/simpleStyle.js",
    "memberof": null,
    "longname": "src/node/styles/simpleStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of the style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The background color of the circle.\n     *\n     * @type {Color}\n     */\n    backgroundColor: predefinedColors.white,\n\n    /**\n     * The border around the circle.\n     *\n     * @type {Object}\n     */\n    border: {\n\n        /**\n         * The color of the border.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.black,\n\n        /**\n         * The line-width of the border.\n         *\n         * @type {Number}\n         */\n        width: 2\n    },\n\n    /**\n     * The radius of the circle.\n     *\n     * @type {Number}\n     */\n    radius: 10\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Object} conf\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const circle = utils.makeCircle(conf, conf.radius);\n\n    return utils.makeCanvasSprite(circle);\n};\nregistry.addNodeStyle(\"simple\", makeSprite);\n"
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/styles/simpleStyle.js",
    "longname": "src/node/styles/simpleStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/simpleStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of the style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/node/styles/simpleStyle.js",
    "longname": "src/node/styles/simpleStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/simpleStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/styles/tableStyle.js",
    "memberof": null,
    "longname": "src/node/styles/tableStyle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {predefinedColors} from \"@ignavia/util\";\n\nimport registry   from \"../../registry.js\";\nimport * as utils from \"../../utils.js\";\n\n/**\n * The default configuration of this style.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The content of the table.\n     *\n     * @type {Object}\n     *\n     * @property {Array} content.headers\n     * The headers of the table.\n     *\n     * @property {Array} content.data\n     * A two-dimensional array of the data. Each entry represents one row.\n     */\n    content: {\n        headers: [],\n        data:    [],\n    },\n\n    /**\n     * How the header cells should look.\n     *\n     * @type {Object}\n     */\n    headerCell: {\n\n        /**\n         * The background-color of header cells.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.lightgray,\n\n        /**\n         * The style of the text of the header cells.\n         *\n         * @type {Object}\n         */\n        text: {\n\n            /**\n             * How the text should be aligned. The possible values are \"left\", \"center\" and\n             * \"right\". For a single line of text this option has no effect.\n             *\n             * @type {String}\n             */\n            align: \"left\",\n\n            /**\n             * How the drop shadow of the text should look.\n             *\n             * @type {Object}\n             */\n            dropShadow: {\n\n                /**\n                 * The angle of the drop shadow given in radian. An angle of 0 means that the\n                 * shadow goes to the right, increasing the angle moves the shadow clockwise.\n                 *\n                 * @type {Number}\n                 */\n                angle: Math.PI / 4,\n\n                /**\n                 * The color of the shadow.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.gray,\n\n                /**\n                 * How long the drop shadow should be. Set this to 0 to remove it.\n                 *\n                 * @type {Number}\n                 */\n                distance: 0\n            },\n\n            /**\n             * The color to fill the text with.\n             *\n             * @type {Color}\n             */\n            fillColor: predefinedColors.black,\n\n            /**\n             * Configures the font of the text.\n             *\n             * @type {Object}\n             */\n            font: {\n\n                /**\n                 * The font-family to use.\n                 *\n                 * @type {String}\n                 */\n                family: \"Arial\",\n\n                /**\n                 * The font-size to use.\n                 *\n                 * @type {Number}\n                 */\n                size: 20,\n\n                /**\n                 * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n                 *\n                 * @type {String}\n                 */\n                style: \"normal\",\n\n                /**\n                 * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n                 */\n                weight: \"bold\"\n            },\n\n            /**\n             * How the stroke around the text should look.\n             *\n             * @type {Object}\n             */\n            stroke: {\n\n                /**\n                 * The color of the stroke around the text.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.white,\n\n                /**\n                 * How thick the stroke should be. Set this to 0 to deactivate it.\n                 *\n                 * @type {Number}\n                 */\n                thickness: 0\n            },\n\n            /**\n             * The width at which the text is going to wrap. Set this to 0 to\n             * disable it.\n             *\n             * @type {Number}\n             */\n            wordWrapWidth: 0\n        }\n    },\n\n    /**\n     * The styling of data cells.\n     *\n     * @type {Object}\n     */\n    dataCell: {\n\n        /**\n         * The background-color of the data cells.\n         *\n         * @type {Color}\n         */\n        backgroundColor: predefinedColors.white,\n\n        /**\n         * The style of the text of a data cell.\n         *\n         * @type {Object}\n         */\n        text: {\n\n            /**\n             * How the text should be aligned. The possible values are \"left\", \"center\" and\n             * \"right\". For a single line of text this option has no effect.\n             *\n             * @type {String}\n             */\n            align: \"left\",\n\n            /**\n             * How the drop shadow of the text should look.\n             *\n             * @type {Object}\n             */\n            dropShadow: {\n\n                /**\n                 * The angle of the drop shadow given in radian. An angle of 0 means that the\n                 * shadow goes to the right, increasing the angle moves the shadow clockwise.\n                 *\n                 * @type {Number}\n                 */\n                angle: Math.PI / 4,\n\n                /**\n                 * The color of the shadow.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.gray,\n\n                /**\n                 * How long the drop shadow should be. Set this to 0 to remove it.\n                 *\n                 * @type {Number}\n                 */\n                distance: 0\n            },\n\n            /**\n             * The color to fill the text with.\n             *\n             * @type {Color}\n             */\n            fillColor: predefinedColors.black,\n\n            /**\n             * Configures the font of the text.\n             *\n             * @type {Object}\n             */\n            font: {\n\n                /**\n                 * The font-family to use.\n                 *\n                 * @type {String}\n                 */\n                family: \"Arial\",\n\n                /**\n                 * The font-size to use.\n                 *\n                 * @type {Number}\n                 */\n                size: 16,\n\n                /**\n                 * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n                 *\n                 * @type {String}\n                 */\n                style: \"normal\",\n\n                /**\n                 * The weight of the font. This can either be \"light\", \"normal\" or \"bold\".\n                 */\n                weight: \"bold\"\n            },\n\n            /**\n             * How the stroke around the text should look.\n             *\n             * @type {Object}\n             */\n            stroke: {\n\n                /**\n                 * The color of the stroke around the text.\n                 *\n                 * @type {Color}\n                 */\n                color: predefinedColors.white,\n\n                /**\n                 * How thick the stroke should be. Set this to 0 to deactivate it.\n                 *\n                 * @type {Number}\n                 */\n                thickness: 0\n            },\n\n            /**\n             * The width at which the text is going to wrap. Set this to 0 to\n             * disable it.\n             *\n             * @type {Number}\n             */\n            wordWrapWidth: 0\n        }\n    },\n\n    /**\n     * How the border between cells and around the table should look.\n     *\n     * @type {Object}\n     */\n    border: {\n\n        /**\n         * The color of the border.\n         *\n         * @type {Color}\n         */\n        color: predefinedColors.black,\n\n        /**\n         * The width of the border:\n         *\n         * @type {Number}\n         */\n        width: 2,\n\n        /**\n         * Whether to show vertical borders.\n         *\n         * @type {Boolean}\n         */\n        vertical: true,\n\n        /**\n         * Whether to show horizontal borders.\n         *\n         * @type {Boolean}\n         */\n        horizontal: true,\n\n        /**\n         * Whether to show a border around the table.\n         */\n        around: true\n    },\n\n    /**\n     * The padding around the text in cells.\n     *\n     * @type {Number}\n     */\n    padding: 10\n};\n\n/**\n * Creates a sprite using the given configuration.\n *\n * @param {Object} [conf]\n * Check the documentation of the default configuration for the structure of\n * this object.\n *\n * @return {DisplayObject}\n * The created sprite.\n */\nexport default function makeSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const container = makeContainer(conf, conf.content);\n\n    return utils.makeCanvasSprite(container);\n};\nregistry.addNodeStyle(\"table\", makeSprite);\n\n/**\n * Creates the container that is used to make the final sprite.\n *\n * @param {Object} conf\n * The configuration of this style.\n *\n * @param {Object} content\n * The content of the table.\n */\nfunction makeContainer(conf, content) {\n    const {labels, columnWidths, rowHeights} = makeLabels(conf, content);\n\n    const width  = computeWidth(conf, columnWidths);\n    const height = computeHeight(conf, rowHeights);\n\n    positionLabels(conf, labels, columnWidths, rowHeights, width, height);\n\n    const box     = makeBox(conf, rowHeights[0], width, height);\n    const borders = makeBorders(conf, columnWidths, rowHeights, width, height);\n\n    const result = new PIXI.Container();\n    result.addChild(box);\n    result.addChild(borders);\n    for (let row of labels) {\n        for (let label of row) {\n            result.addChild(label);\n        }\n    }\n\n    return result;\n}\n\n/**\n * Creates the display objects for the labels.\n *\n * @param {Object} conf\n * The configuration of this style.\n *\n * @param {Object} content\n * The content of the table.\n *\n * @return {Object}\n * You can find the created display objects in a two-dimensional array under\n * the labels key. Furthermore, the returned object has a columnWidths and a\n * rowHeight property.\n */\nfunction makeLabels(conf, content) {\n    const labels       = [[]];\n    const columnWidths = [];\n    const rowHeights   = [];\n\n    // Header\n    for (let c = 0; c < content.headers.length; c++) {\n        const label     = utils.makeText(conf.headerCell.text, content.headers[c]);\n        labels[0][c]    = label;\n        columnWidths[c] = adjustDimension(conf, columnWidths[c], label.width);\n        rowHeights[0]   = adjustDimension(conf, rowHeights[0],   label.height);\n    }\n\n    // Data\n    for (let r = 1; r <= content.data.length; r++) {\n        labels[r] = [];\n        for (let c = 0; c < content.data[r - 1].length; c++) {\n            const label     = utils.makeText(conf.dataCell.text, content.data[r - 1][c]);\n            labels[r][c]    = label;\n            columnWidths[c] = adjustDimension(conf, columnWidths[c], label.width);\n            rowHeights[r]   = adjustDimension(conf, rowHeights[r],   label.height);\n        }\n    }\n\n    return {labels, columnWidths, rowHeights};\n}\n\n/**\n * Moves the labels to the correct positions.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Array} labels\n * The display objects of the labels.\n *\n * @param {Array} columnWidths\n * The widths of the columns.\n *\n * @param {Array} rowHeights\n * The heights of the rows.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n */\nfunction positionLabels(conf, labels, columnWidths, rowHeights, width, height) {\n    let curY = (rowHeights[0] || 0) / 2 - height / 2;\n    for (let r = 0; r < labels.length; r++) {\n\n        let curX = (columnWidths[0] || 0) / 2 - width / 2;\n        for (let c = 0; c < labels[r].length; c++) {\n            labels[r][c].x += curX;\n            labels[r][c].y += curY;\n\n            curX += columnWidths[c] / 2 +\n                    (conf.border.vertical ? conf.border.width : 0) +\n                    (columnWidths[c + 1] || 0) / 2;\n        }\n\n        curY += rowHeights[r] / 2 +\n                (conf.border.horizontal ? conf.border.width : 0) +\n                (rowHeights[r + 1] || 0) / 2;\n    }\n}\n\n/**\n * Creates the borders of the table.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Array} columnWidths\n * The widths of the columns.\n *\n * @param {Array} rowHeights\n * The heights of the rows.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nfunction makeBorders(conf, columnWidths, rowHeights, width, height) {\n    const result = new PIXI.Container();\n\n    if (conf.border.vertical){\n        result.addChild(makeVerticalBorders(conf, columnWidths, width, height));\n    }\n    if (conf.border.horizontal) {\n        result.addChild(makeHorizontalBorders(conf, rowHeights, width, height));\n    }\n    if (conf.border.around) {\n        result.addChild(makeBorderAround(conf, width, height));\n    }\n\n    return result;\n}\n\n/**\n * Creates the vertical borders of the table.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Array} columnWidths\n * The widths of the columns.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nfunction makeVerticalBorders(conf, columnWidths, width, height) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(conf.border.width, conf.border.color.hex, conf.border.color.alpha);\n\n    let curX = -width / 2 - conf.border.width / 2;\n    for (let c = 0; c < columnWidths.length - 1; c++) {\n        curX += columnWidths[c] + conf.border.width;\n        result.moveTo(curX, -height / 2);\n        result.lineTo(curX,  height / 2);\n    }\n\n    return result;\n}\n\n/**\n * Creates the horizontal borders of the table.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Array} rowHeights\n * The heights of the rows.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nfunction makeHorizontalBorders(conf, rowHeights, width, height) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(conf.border.width, conf.border.color.hex, conf.border.color.alpha);\n\n    let curY = -height / 2 - conf.border.width / 2;\n    for (let r = 0; r < rowHeights.length - 1; r++) {\n        curY += rowHeights[r] + conf.border.width;\n        result.moveTo(-width / 2, curY);\n        result.lineTo( width / 2, curY);\n    }\n\n    return result;\n}\n\n/**\n * Creates the borders of the table.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nfunction makeBorderAround(conf, width, height) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(conf.border.width, conf.border.color.hex, conf.border.color.alpha);\n\n    result.moveTo(-width / 2 - conf.border.width / 2, -height / 2 - conf.border.width / 2);\n    result.lineTo( width / 2 + conf.border.width / 2, -height / 2 - conf.border.width / 2);\n    result.lineTo( width / 2 + conf.border.width / 2,  height / 2 + conf.border.width / 2);\n    result.lineTo(-width / 2 - conf.border.width / 2,  height / 2 + conf.border.width / 2);\n    result.lineTo(-width / 2 - conf.border.width / 2, -height / 2 - conf.border.width / 2);\n\n    return result;\n}\n\n/**\n * Computes the width of the table not including the border around the\n * table.\n *\n * @param {Object} conf\n * The configuration of this style.\n *\n * @param {Array} columnWidths\n * The widths of the individual columns.\n *\n * @return {Number}\n * The width.\n */\nfunction computeWidth(conf, columnWidths) {\n    let result = _.sum(columnWidths);\n    if (conf.border.vertical) {\n        result += (columnWidths.length - 1) * conf.border.width;\n    }\n    return result;\n}\n\n/**\n * Computes the height of the table not including the border around the\n * table.\n *\n * @param {Object} conf\n * The configuration of this style.\n *\n * @param {Array} columnWidths\n * The heights of the individual rows.\n *\n * @return {Number}\n * The height.\n */\nfunction computeHeight(conf, rowHeights) {\n    let result = _.sum(rowHeights);\n    if (conf.border.horizontal) {\n        result += (rowHeights.length - 1) * conf.border.width;\n    }\n    return result;\n}\n\n/**\n * Creates the box for the background-color of the table.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Number} headerRowHeight\n * The height of the header row.\n *\n * @param {Number} width\n * The width of the complete table.\n *\n * @param {Number} height\n * The height of the complete table.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nfunction makeBox(conf, headerRowHeight, width, height) {\n    const result = new PIXI.Graphics();\n\n    // Header\n    result.beginFill(conf.headerCell.backgroundColor.hex, conf.headerCell.backgroundColor.alpha);\n    result.drawRect(\n        -width  / 2,\n        -height / 2,\n        width,\n        headerRowHeight\n    );\n\n    // Data\n    result.beginFill(conf.dataCell.backgroundColor.hex, conf.dataCell.backgroundColor.alpha);\n    result.drawRect(\n        -width  / 2,\n        -height / 2 + headerRowHeight,\n        width,\n        height - headerRowHeight\n    );\n\n    return result;\n}\n\n/**\n * Returns the maximum of the old row height/columnwidth and the current cell\n * height/width. It also adds the padding from the settings.\n *\n * @param {Object} conf\n * The configuration of the style.\n *\n * @param {Number} old\n * The old maximum dimension.\n *\n * @param {Number} current\n * The current dimension.\n */\nfunction adjustDimension(conf, old, current) {\n    current = current + 2 * conf.padding;\n    if (old === undefined) {\n        return current;\n    }\n    return Math.max(old, current);\n}\n"
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this style.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeSprite",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": "makeSprite",
    "description": "Creates a sprite using the given configuration.",
    "lineNumber": 352,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "Check the documentation of the default configuration for the structure of\nthis object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created sprite."
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeContainer",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeContainer",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the container that is used to make the final sprite.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of this style."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content of the table."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeLabels",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeLabels",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the display objects for the labels.",
    "lineNumber": 407,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of this style."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content of the table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "You can find the created display objects in a two-dimensional array under\nthe labels key. Furthermore, the returned object has a columnWidths and a\nrowHeight property."
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "positionLabels",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~positionLabels",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Moves the labels to the correct positions.",
    "lineNumber": 455,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "labels",
        "description": "The display objects of the labels."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "columnWidths",
        "description": "The widths of the columns."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rowHeights",
        "description": "The heights of the rows."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeBorders",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeBorders",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the borders of the table.",
    "lineNumber": 496,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "columnWidths",
        "description": "The widths of the columns."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rowHeights",
        "description": "The heights of the rows."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeVerticalBorders",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeVerticalBorders",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the vertical borders of the table.",
    "lineNumber": 530,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "columnWidths",
        "description": "The widths of the columns."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeHorizontalBorders",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeHorizontalBorders",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the horizontal borders of the table.",
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rowHeights",
        "description": "The heights of the rows."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeBorderAround",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeBorderAround",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the borders of the table.",
    "lineNumber": 591,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeWidth",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~computeWidth",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Computes the width of the table not including the border around the\ntable.",
    "lineNumber": 617,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of this style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "columnWidths",
        "description": "The widths of the individual columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The width."
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeHeight",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~computeHeight",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Computes the height of the table not including the border around the\ntable.",
    "lineNumber": 638,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of this style."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "columnWidths",
        "description": "The heights of the individual rows."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The height."
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeBox",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~makeBox",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Creates the box for the background-color of the table.",
    "lineNumber": 664,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "headerRowHeight",
        "description": "The height of the header row."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the complete table."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the complete table."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "adjustDimension",
    "memberof": "src/node/styles/tableStyle.js",
    "longname": "src/node/styles/tableStyle.js~adjustDimension",
    "access": null,
    "export": false,
    "importPath": "@ignavia/draph/src/node/styles/tableStyle.js",
    "importStyle": null,
    "description": "Returns the maximum of the old row height/columnwidth and the current cell\nheight/width. It also adds the padding from the settings.",
    "lineNumber": 701,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration of the style."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "old",
        "description": "The old maximum dimension."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "The current dimension."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/node/visualizer.js",
    "memberof": null,
    "longname": "src/node/visualizer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2} from \"@ignavia/ella\";\n\nimport registry      from \"../registry.js\";\nimport * as utils    from \"../utils.js\";\n\n/**\n * The default configuration of this visualizer.\n *\n * @type {Object}\n */\nexport const defaultConf = {\n\n    /**\n     * The configuration of the style to use.\n     *\n     * @type {Object}\n     */\n    style: {\n\n        /**\n         * The function to call to make the sprite.\n         *\n         * @type {String}\n         */\n        type: \"simple\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {}\n    },\n\n    /**\n     * The configuration of the behaviors to use.\n     *\n     * @type {Object}\n     */\n    behaviors: [{\n\n        /**\n         * The function to call to add the behavior.\n         *\n         * @type {String}\n         */\n        type: \"empty\",\n\n        /**\n         * The configuration to pass to the function.\n         *\n         * @type {Object}\n         */\n        conf: {}\n    }],\n\n    /**\n     * Where to place the sprite.\n     *\n     * @type {Vec2}\n     */\n    position: new Vec2(0, 0),\n\n    /**\n     * How to scale the sprite. x- and y-scales can be set seperately. If the\n     * width or height is set, those values are used instead.\n     *\n     * @type {Number|Vec2}\n     */\n    scale: 1,\n\n    /**\n     * The width of the sprite. Set this to \"orig\" to use the width of the\n     * original sprite and to \"auto\" to keep the aspect ratio when setting\n     * the height.\n     *\n     * @type {Number|String}\n     */\n    width: \"orig\",\n\n    /**\n     * The height of the sprite. Set this to \"orig\" to use the height of the\n     * original sprite and to \"auto\" to keep the aspect ratio when setting\n     * the width.\n     *\n     * @type {Number|String}\n     */\n    height: \"orig\",\n\n    /**\n     * The point to rotate the display object about.\n     *\n     * @type {Vec2}\n     */\n    pivot: new Vec2(0, 0),\n\n    /**\n     * The rotation angle of the display object.\n     *\n     * @type {Number}\n     */\n    rotation: 0\n};\n\n/**\n * Makes a sprite with behavior and positions, rotates and scales it according\n * to the given configuration.\n *\n * @param {Object} [conf]\n * The configuration of the visualizer. Check the default configuration to see\n * the structure of this object.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport default function makeEnhancedSprite(conf = {}) {\n    conf = utils.adjustConf(defaultConf, conf);\n\n    const style  = registry.get([\"node\", \"style\", conf.style.type]);\n    const result = style(conf.style.conf);\n\n    for (let behavior of conf.behaviors) {\n        const behaviorFunction = registry.get([\"node\", \"behavior\", behavior.type]);\n        behaviorFunction(result, behavior.conf);\n    }\n\n    utils.setScale(conf.scale, result);\n    utils.setBounds(conf.width, conf.height, result);\n    utils.setPivot(conf.pivot, result);\n    utils.setRotation(conf.rotation, result);\n    utils.setPosition(conf.position, result);\n    result.hitArea = utils.computeHitArea(result);\n\n    return result;\n};\n"
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultConf",
    "memberof": "src/node/visualizer.js",
    "longname": "src/node/visualizer.js~defaultConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/visualizer.js",
    "importStyle": "{defaultConf}",
    "description": "The default configuration of this visualizer.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeEnhancedSprite",
    "memberof": "src/node/visualizer.js",
    "longname": "src/node/visualizer.js~makeEnhancedSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/node/visualizer.js",
    "importStyle": "makeEnhancedSprite",
    "description": "Makes a sprite with behavior and positions, rotates and scales it according\nto the given configuration.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "conf",
        "description": "The configuration of the visualizer. Check the default configuration to see\nthe structure of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/registry.js",
    "memberof": null,
    "longname": "src/registry.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {GumpMap} from \"@ignavia/util\";\n\n/**\n * Stores style and behavior functions.\n */\nclass Registry {\n\n    /**\n     *\n     */\n    constructor() {\n\n        /**\n         * Maps from paths to the actual functions.\n         *\n         * @type {GumpMap<GumpPath, Function>}\n         *\n         * @private\n         */\n        this.map = new GumpMap();\n    }\n\n    /**\n     * Adds the function to the registry under the given path.\n     *\n     * @param {GumpPath} path\n     * The path to the function.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    add(path, f) {\n        this.map.set(path, f);\n        return this;\n    }\n\n    /**\n     * Adds an arrow style to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addEdgeArrowStyle(name, f) {\n        return this.add([\"edge\", \"arrowStyle\", name], f);\n    }\n\n    /**\n     * Adds an edge behavior to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addEdgeBehavior(name, f) {\n        return this.add([\"edge\", \"behavior\", name], f);\n    }\n\n    /**\n     * Adds a decal style to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addEdgeDecalStyle(name, f) {\n        return this.add([\"edge\", \"decalStyle\", name], f);\n    }\n\n    /**\n     * Adds a line style to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addEdgeLineStyle(name, f) {\n        return this.add([\"edge\", \"lineStyle\", name], f);\n    }\n\n    /**\n     * Adds a graph behavior to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addGraphBehavior(name, f) {\n        return this.add([\"graph\", \"behavior\", name], f);\n    }\n\n    /**\n     * Adds a graph style to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addGraphStyle(name, f) {\n        return this.add([\"graph\", \"style\", name], f);\n    }\n\n    /**\n     * Adds a node behavior to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addNodeBehavior(name, f) {\n        return this.add([\"node\", \"behavior\", name], f);\n    }\n\n    /**\n     * Adds a node style to the registry.\n     *\n     * @param {String} name\n     * The name to register.\n     *\n     * @param {Function} f\n     * The function to add.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    addNodeStyle(name, f) {\n        return this.add([\"node\", \"style\", name], f);\n    }\n\n    /**\n     * Removes the function stored under the given path.\n     *\n     * @param {GumpPath} path\n     * The path to the function.\n     *\n     * @return {Registry}\n     * This object to make the method chainable.\n     */\n    delete(path) {\n        this.map.delete(path);\n        return this;\n    }\n\n    /**\n     * Returns the function stored under the given path.\n     *\n     * @param {GumpPath} path\n     * The path to the function.\n     *\n     * @return {Function}\n     * The functions listed under the given path.\n     */\n    get(path) {\n        return [...this.map.get(path)][0];\n    }\n};\n\n/**\n * The sole instance of the registry.\n *\n * @type {Registry}\n */\nexport default new Registry();"
  },
  {
    "__docId__": 206,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Registry",
    "memberof": "src/registry.js",
    "longname": "src/registry.js~Registry",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/registry.js",
    "importStyle": null,
    "description": "Stores style and behavior functions.",
    "lineNumber": 6,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#constructor",
    "access": null,
    "description": "",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#map",
    "access": "private",
    "description": "Maps from paths to the actual functions.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "GumpMap<GumpPath, Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#add",
    "access": null,
    "description": "Adds the function to the registry under the given path.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdgeArrowStyle",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addEdgeArrowStyle",
    "access": null,
    "description": "Adds an arrow style to the registry.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdgeBehavior",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addEdgeBehavior",
    "access": null,
    "description": "Adds an edge behavior to the registry.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdgeDecalStyle",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addEdgeDecalStyle",
    "access": null,
    "description": "Adds a decal style to the registry.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdgeLineStyle",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addEdgeLineStyle",
    "access": null,
    "description": "Adds a line style to the registry.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addGraphBehavior",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addGraphBehavior",
    "access": null,
    "description": "Adds a graph behavior to the registry.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addGraphStyle",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addGraphStyle",
    "access": null,
    "description": "Adds a graph style to the registry.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addNodeBehavior",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addNodeBehavior",
    "access": null,
    "description": "Adds a node behavior to the registry.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addNodeStyle",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#addNodeStyle",
    "access": null,
    "description": "Adds a node style to the registry.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to register."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#delete",
    "access": null,
    "description": "Removes the function stored under the given path.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": "This object to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/registry.js~Registry",
    "longname": "src/registry.js~Registry#get",
    "access": null,
    "description": "Returns the function stored under the given path.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The functions listed under the given path."
    },
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "registry",
    "memberof": "src/registry.js",
    "longname": "src/registry.js~registry",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/registry.js",
    "importStyle": "registry",
    "description": "The sole instance of the registry.",
    "lineNumber": 201,
    "type": {
      "nullable": null,
      "types": [
        "Registry"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/utils.js",
    "memberof": null,
    "longname": "src/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash\";\n\nimport {Vec2}             from \"@ignavia/ella\";\nimport {predefinedColors} from \"@ignavia/util\";\n\n/**\n * A canvas renderer.\n *\n * @type {Renderer}\n * @ignore\n */\nexport const canvasRenderer = new PIXI.CanvasRenderer({\n    antialias:  true,\n    resolution: window.devicePixelRatio || 1\n});\n\n/**\n * Creates a sprite from the given display object using a canvas renderer.\n *\n * @param {DisplayObject} displayObject\n * The display object to turn into a sprite.\n */\nexport function makeCanvasSprite(displayObject) {\n    const texture = displayObject.generateTexture(canvasRenderer);\n    const sprite  = new PIXI.Sprite(texture);\n    sprite.anchor = computeAnchor(displayObject);\n    return sprite;\n}\n\n/**\n * An empty display object.\n *\n * @type {DisplayObject}\n */\nexport const emptyDisplayObject = new PIXI.Container();\nemptyDisplayObject.width  = 0;\nemptyDisplayObject.height = 0;\n\n/**\n * Replaces the properties in the base configuration with the ones listed in the\n * adjustments object. Anything not listed in the adjustments object is taken\n * unaltered from the base object.\n *\n * @param {Object} base\n * The base configuration.\n *\n * @param {Object} adjustments\n * The adjustments to make.\n *\n * @return {Object}\n * The resulting configuration.\n */\nexport function adjustConf(base, adjustments) {\n    return _.merge({}, base, adjustments);\n}\n\n/**\n * Creates a display object of line.\n *\n * @param {Object} style\n * How the line should look.\n *\n * @param {Number} style.width\n * The width of the line.\n *\n * @param {Color} style.color\n * The color of the line.\n *\n * @param {Vec2} startPos\n * Where to start the line.\n *\n * @param {Vec2} endPos\n * Where to end the line.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeLine = _.curry(function (style, startPos, endPos) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.width, style.color.hex, style.color.alpha);\n    result.moveTo(startPos.x, startPos.y);\n    result.lineTo(endPos.x, endPos.y);\n    return result;\n});\n\n/**\n * Creates a display object of quadratic curve.\n *\n * @param {Object} style\n * How the line should look.\n *\n * @param {Number} style.width\n * The width of the line.\n *\n * @param {Color} style.color\n * The color of the line.\n *\n * @param {Vec2} startPos\n * Where to start the line.\n *\n * @param {Vec2} controlPos\n * The control point.\n *\n * @param {Vec2} endPos\n * Where to end the line.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeQuadraticCurve = _.curry(function (style, startPos, controlPos, endPos) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.width, style.color.hex, style.color.alpha);\n    result.moveTo(startPos.x, startPos.y);\n    result.quadraticCurveTo(\n        controlPos.x,\n        controlPos.y,\n        endPos.x,\n        endPos.y\n    );\n    return result;\n});\n\n/**\n * Creates a display object of quadratic curve.\n *\n * @param {Object} style\n * How the line should look.\n *\n * @param {Number} style.width\n * The width of the line.\n *\n * @param {Color} style.color\n * The color of the line.\n *\n * @param {Vec2} startPos\n * Where to start the line.\n *\n * @param {Vec2} controlPos1\n * The first control point.\n *\n * @param {Vec2} controlPos2\n * The second control point.\n *\n * @param {Vec2} endPos\n * Where to end the line.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeBezierCurve = _.curry(function (style, startPos, controlPos1, controlPos2, endPos) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.width, style.color.hex, style.color.alpha);\n    result.moveTo(startPos.x, startPos.y);\n    result.bezierCurveTo(\n        controlPos1.x,\n        controlPos1.y,\n        controlPos2.x,\n        controlPos2.y,\n        endPos.x,\n        endPos.y\n    );\n    return result;\n});\n\n/**\n * Creates a display object of a circle. This function is curried.\n *\n * @param {Object} style\n * How the circle should look.\n *\n * @param {Object} style.border\n * How the border around the circle should look.\n *\n * @param {Number} style.border.width\n * The line width of the border.\n *\n * @param {Color} style.border.color\n * The color of the border.\n *\n * @param {Color} style.backgroundColor\n * The color to fill the circle with.\n *\n * @param {Number} radius\n * The radius of the circle.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeCircle = _.curry(function (style, radius) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.border.width, style.border.color.hex, style.border.color.alpha);\n    result.beginFill(style.backgroundColor.hex, style.backgroundColor.alpha);\n    result.drawCircle(\n        0,\n        0,\n        radius\n    );\n    return result;\n});\n\n/**\n * Creates a display object of an ellipse. This function is curried.\n *\n * @param {Object} style\n * How the ellipse should look.\n *\n * @param {Object} style.border\n * How the border around the ellipse should look.\n *\n * @param {Number} style.border.width\n * The line width of the border.\n *\n * @param {Color} style.border.color\n * The color of the border.\n *\n * @param {Color} style.backgroundColor\n * The color to fill the ellipse with.\n *\n * @param {Number} halfWidth\n * The half width of the ellipse.\n *\n * @param {Number} halfHeight\n * The half height of the ellipse.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeEllipse = _.curry(function (style, halfWidth, halfHeight) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.border.width, style.border.color.hex, style.border.color.alpha);\n    result.beginFill(style.backgroundColor.hex, style.backgroundColor.alpha);\n    result.drawEllipse(\n        0,\n        0,\n        halfWidth,\n        halfHeight\n    );\n    return result;\n});\n\n/**\n * Creates a display object of a rectangle. This function is curried.\n *\n * @param {Object} style\n * How the rectangle should look.\n *\n * @param {Object} style.border\n * How the border around the rectangle should look.\n *\n * @param {Number} style.border.width\n * The line width of the border.\n *\n * @param {Color} style.border.color\n * The color of the border.\n *\n * @param {Color} style.backgroundColor\n * The color to fill the rectangle with.\n *\n * @param {Number} width\n * The width of the rectangle.\n *\n * @param {Number} height\n * The height of the rectangle.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeRect = _.curry(function (style, width, height) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.border.width, style.border.color.hex, style.border.color.alpha);\n    result.beginFill(style.backgroundColor.hex, style.backgroundColor.alpha);\n    result.drawRect(\n        -width  / 2,\n        -height / 2,\n        width,\n        height\n    );\n    return result;\n});\n\n/**\n * Creates a display object of a rounded rectangle. This function is curried.\n *\n * @param {Object} style\n * How the rounded rectangle should look.\n *\n * @param {Object} style.border\n * How the border around the rounded rectangle should look.\n *\n * @param {Number} style.border.width\n * The line width of the border.\n *\n * @param {Color} style.border.color\n * The color of the border.\n *\n * @param {Color} style.backgroundColor\n * The color to fill the rounded rectangle with.\n *\n * @param {Number} width\n * The width of the rounded rectangle.\n *\n * @param {Number} height\n * The height of the rounded rectangle.\n *\n * @param {Number} radius\n * The radius of the circles at the corners of the rectangle.\n *\n * @return {DisplayObject}\n * The created display object.\n */\nexport const makeRoundedRect = _.curry(function (style, width, height, radius) {\n    const result = new PIXI.Graphics();\n    result.lineStyle(style.border.width, style.border.color.hex, style.border.color.alpha);\n    result.beginFill(style.backgroundColor.hex, style.backgroundColor.alpha);\n    result.drawRoundedRect(\n        -width  / 2,\n        -height / 2,\n        width,\n        height,\n        radius\n    );\n    return result;\n});\n\n/**\n * Creates a display object of a text. This function is curried.\n *\n * @param {Object} style\n * How the text should look.\n *\n * @param {String} style.align\n * How the text should be aligned. The possible values are \"left\", \"center\" and\n * \"right\". For a single line of text this option has no effect.\n *\n * @param {Object} style.dropShadow\n * How the drop shadow of the text should look.\n *\n * @param {Number} style.dropShadow.distance\n * How long the drop shadow should be. Set this to 0 to remove it.\n *\n * @param {Number} style.dropShadow.angle\n * The angle of the drop shadow given in radian. An angle of 0 means that the\n * shadow goes to the right, increasing the angle moves the shadow clockwise.\n *\n * @param {Color} style.dropShadow.color\n * The color of the shadow.\n *\n * @param {Color} style.fillColor\n * The color to fill the text with.\n *\n * @param {Object} style.font\n * Configures the font of the text.\n *\n * @param {String} style.font.family\n * The font-family to use.\n *\n * @param {String} style.font.size\n * The font-size to use.\n *\n * @param {String} style.font.weight\n * The weight of the font. This can either be \"normal\" or \"bold\".\n *\n * @param {String} style.font.style\n * The style of the font. This can either be \"normal\", \"italic\" or \"oblique\".\n *\n * @param {Object} style.stroke\n * How the stroke around the text should look.\n *\n * @param {Color} style.stroke.color\n * The color of the stroke around the text.\n *\n * @param {Number} style.stroke.thickness\n * How thick the stroke should be. Set this to 0 to deactivate it.\n *\n * @param {Number} style.wordWrapWidth\n * The width at which the text is going to wrap. Set this to 0 to disable it.\n *\n * @param {String} s\n * The string to use as text.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport const makeText = _.curry(function (style, s) {\n    const result = new PIXI.Text(s, {\n        align:              style.align,\n        dropShadow:         style.dropShadow.distance > 0,\n        dropShadowAngle:    style.dropShadow.angle,\n        dropShadowColor:    style.dropShadow.color.hex,\n        dropShadowDistance: style.dropShadow.distance,\n        fill:               style.fillColor.hex,\n        font:               `${style.font.weight} ${style.font.style} ${style.font.size}px ${style.font.family}`,\n        stroke:             style.stroke.color.hex,\n        strokeThickness:    style.stroke.thickness,\n        wordWrap:           style.wordWrapWidth > 0,\n        wordWrapWidth:      style.wordWrapWidth\n    });\n    result.x = -result.width  / 2;\n    result.y = -result.height / 2;\n    return result;\n});\n\n/**\n * Creates a display object of a box around the given display object.\n *\n * @param {Object} style\n * How the box should look.\n *\n * @param {String} style.shape\n * The shape of the box. This can be one of \"circle\", \"ellipse\", \"rect\" or\n * \"roundedRect\".\n *\n * @param {Number} style.padding\n * The padding to add around the given display object.\n *\n * @param {Object} style.border\n * How the border of the box should look.\n *\n * @param {Number} style.border.width\n * The line width of the border.\n *\n * @param {Color} style.border.color\n * The color of the border.\n *\n * @param {Number} style.border.radius\n * This is only relevant when the shape is set to \"roundedRect\". It describes\n * the radius of the circles in the corners of the rectangle.\n *\n * @param {Color} style.backgroundColor\n * The color to fill the box with.\n *\n * @param {DisplayObject} displayObject\n * The display object to make a box for.\n *\n * @return {DisplayObject}\n * The resulting box.\n */\nexport const makeBox = _.curry(function (style, displayObject) {\n    switch (style.shape) {\n    case \"circle\":\n        return makeCircle(\n            style,\n            Math.max(displayObject.width, displayObject.height) / Math.sqrt(2) + style.padding\n        );\n    case \"ellipse\":\n        return makeEllipse(\n            style,\n            displayObject.width  / Math.sqrt(2) + style.padding,\n            displayObject.height / Math.sqrt(2) + style.padding\n        );\n    case \"rect\":\n        return makeRect(\n            style,\n            displayObject.width  + 2 * style.padding,\n            displayObject.height + 2 * style.padding\n        );\n    case \"roundedRect\":\n        return makeRoundedRect(\n            style,\n            displayObject.width  + 2 * style.padding,\n            displayObject.height + 2 * style.padding,\n            style.border.radius\n        );\n    }\n});\n\n/**\n * Creates a transparent margin for the given display object. This function is\n * curried.\n *\n * @param {Number} margin\n * How wide the margin at one side should be.\n *\n * @param {DisplayObject} displayObject\n * The display object to make a margin for.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport const makeMargin = _.curry(function (margin, displayObject) {\n    const result = new PIXI.Graphics();\n    result.beginFill(predefinedColors.transparent.hex, predefinedColors.transparent.alpha);\n    result.drawRect(\n        -displayObject.width  / 2 -     margin,\n        -displayObject.height / 2 -     margin,\n         displayObject.width      + 2 * margin,\n         displayObject.height     + 2 * margin\n    );\n    return result;\n});\n\n/**\n * Creates a diplay object from the image at the given location.\n *\n * @param {Object} style\n * How the image should look.\n *\n * @param {Number|String} style.width\n * The width of the image. Set this to \"orig\" to use the width of the\n * original image and to \"auto\" to keep the aspect ratio when setting\n * the height.\n *\n * @param {Number|String} style.height\n * The height of the image. Set this to \"orig\" to use the height of the\n * original image and to \"auto\" to keep the aspect ratio when setting\n * the width.\n *\n * @param {String} path\n * The location of the image.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport function makeImage(style, path) {\n    const result = PIXI.Sprite.fromImage(path);\n\n    setBounds(style.width, style.height, result);\n\n    // Adjust position\n    result.x = -result.width  / 2;\n    result.y = -result.height / 2;\n\n    return result;\n}\n\n/**\n * Creates a display object of a caption for the given display object. This\n * function is curried.\n *\n * @param {Object} style\n * How the caption should look.\n *\n * @param {Object} style.text\n * How the text should look. Refer to the makeText function to see how this\n * sub-object has to be structured.\n *\n * @param {Object} style.caption\n * Affects the style of the caption in general.\n *\n * @param {String} style.caption.side\n * Where the caption should be positioned in relation to the given display\n * object. Possible options are \"center\", \"above\", \"right\", \"below\" and \"left\".\n *\n * @param {Number} style.caption.gap\n * How large the gap between the given display object and the caption should be.\n *\n * @param {String} text\n * The text to display.\n *\n * @param {DisplayObject} displayObject\n * The display object to make the caption for.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport const makeCaption = _.curry(function (style, text, displayObject) {\n    const result = makeText(style.text, text);\n\n    switch (style.side) {\n    case \"above\":\n        result.y -= (displayObject.height + result.height) / 2 + style.gap; break;\n    case \"right\":\n        result.x += (displayObject.width  + result.width)  / 2 + style.gap; break;\n    case \"below\":\n        result.y += (displayObject.height + result.height) / 2 + style.gap; break;\n    case \"left\":\n        result.x -= (displayObject.width  + result.width)  / 2 + style.gap; break;\n    }\n\n    return result;\n});\n\n/**\n * Creates a label surrounded by a box.\n *\n * @param {Object} style\n * How everything should look.\n *\n * @param {Object} style.text\n * How the text should look. Refer to the makeText function to see how this\n * sub-object has to be structured.\n *\n * @param {Object} style.box\n * How the box around the text should look. Refer to the makeBox function to see\n * how this sub-object has to be structured.\n *\n * @param {Object} style.box.margin\n * The margin to add around the box. This is useful to prevent PIXI from cutting\n * some pixels of the border off.\n *\n * @param {String} text\n * The text to display.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport const makeBoxedLabel = _.curry(function (style, text) {\n    const result    = new PIXI.Container();\n    const label     = makeText(style.text, text);\n    const box       = makeBox(style.box, label);\n    const margin    = makeMargin(style.box.margin, box);\n    result.addChild(margin);\n    result.addChild(box);\n    result.addChild(label);\n    return result;\n});\n\n/**\n * Creates an image with a label.\n *\n * @param {Object} style\n * How everything should look.\n *\n * @param {Object} style.image\n * How the image should look. Refer to the makeImage function to see how this\n * sub-object should be structured.\n *\n * @param {Object} style.caption\n * How the caption should look. Check the documentation of the makeCaption\n * function for further information.\n *\n * @param {String} imagePath\n * The path to the image.\n *\n * @param {String} text\n * The caption text.\n *\n * @return {DisplayObject}\n * The resulting display object.\n */\nexport const makeCaptionedImage = _.curry(function (style, imagePath, text) {\n    const result       = new PIXI.Container();\n    const illustration = makeImage(style.image, imagePath);\n    result.addChild(illustration);\n\n    if (style.captionSide !== \"none\") {\n        const caption  = makeCaption(style.caption, text, illustration);\n        result.addChild(caption);\n\n        const centerX = Math.min(illustration.x, caption.x) + result.width  / 2;\n        const centerY = Math.min(illustration.y, caption.y) + result.height / 2;\n        illustration.x -= centerX;\n        illustration.y -= centerY;\n        caption.x      -= centerX;\n        caption.y      -= centerY;\n    }\n\n    return result;\n});\n\n/**\n * Adds event handlers to the given display object.\n *\n * @param {Object} conf\n * Contains the event handlers to add.\n *\n * @param {Function} conf.mouseover\n * Is triggered when the mouse moves onto the display object.\n *\n * @param {Function} conf.mouseout\n * Is triggered when the mouse leaves the display object.\n *\n * @param {Function} conf.mousedown\n * Is triggered when the left mousebutton is pressed when the mouse is on the\n * display object.\n *\n * @param {Function} conf.mouseup\n * Is triggered when the left mousebutton is released when the mouse is on the\n * display object.\n *\n * @param {Function} conf.click\n * Is triggered right after the mouseup event.\n *\n * @param {Function} conf.touchstart\n * Is triggered when the display object is touched.\n *\n * @param {Function} conf.touchend\n * Is triggered when the display object is no longer touched.\n *\n * @param {Function} conf.tap\n * Is triggered right after the touchend event.\n *\n * @param {DisplayObject} displayObject\n * The display object to make interactive.\n */\nexport const addInteraction = _.curry(function (conf, displayObject) {\n    displayObject.interactive = true;\n    displayObject.buttonMode  = true;\n    displayObject.mouseover   = conf.handleMouseover;\n    displayObject.mouseout    = conf.handleMouseout;\n    displayObject.mousedown   = conf.handleMousedown;\n    displayObject.mouseup     = conf.handleMouseup;\n    displayObject.click       = conf.handleClick;\n    displayObject.touchstart  = conf.handleTouchstart;\n    displayObject.touchend    = conf.handleTouchend;\n    displayObject.tap         = conf.handleTap;\n});\n\n/**\n * Sets the position of the given display object.\n *\n * @param {Vec2} position\n * Where to place the display object.\n *\n * @param {DisplayObject} displayObject\n * The display object to place.\n */\nexport function setPosition(position, displayObject) {\n    displayObject.position.x = position.x;\n    displayObject.position.y = position.y;\n}\n\n/**\n * Sets the scale of the given display object.\n *\n * @param {Vec2|Number} scale\n * The factor to enlarge or shrink the display object by. If a single number\n * is provided, it is use for the x- and y-directions.\n *\n * @param {DisplayObject} displayObject\n * The display object to scale.\n */\nexport function setScale(scale, displayObject) {\n    if (typeof scale === \"number\") {\n        displayObject.scale.x = scale;\n        displayObject.scale.y = scale;\n    } else if (typeof scale.x === \"number\" && typeof scale.y === \"number\") {\n        displayObject.scale.x = scale.x;\n        displayObject.scale.y = scale.y;\n    }\n}\n\n/**\n * Sets the width and height of the given display object.\n *\n * @param {Number|String} width\n * The width of the image. Set this to \"orig\" to use the width of the\n * original image and to \"auto\" to keep the aspect ratio when setting\n * the height.\n *\n * @param {Number|String} height\n * The height of the image. Set this to \"orig\" to use the height of the\n * original image and to \"auto\" to keep the aspect ratio when setting\n * the width.\n *\n * @param {DisplayObject} displayObject\n * The display object to adjust.\n */\nexport function setBounds(width, height, displayObject) {\n    const oldWidth  = displayObject.width;\n    const oldHeight = displayObject.height;\n\n    // Adjust width\n    if (width === \"auto\") {\n        if (height !== \"auto\" || height !== \"orig\") {\n            displayObject.width *= height / oldHeight;\n        }\n    } else if (width !== \"orig\") {\n        displayObject.width = width;\n    }\n\n    // Adjust height\n    if (height === \"auto\") {\n        if (width !== \"auto\" || width !== \"orig\") {\n            displayObject.height *= width / oldWidth;\n        }\n    } else if (height !== \"orig\") {\n        displayObject.height = height;\n    }\n}\n\n/**\n * Sets the point to rotate the given display object about.\n *\n * @param {Vec2} pivot\n * Where to rotate the display object around.\n *\n * @param {DisplayObject} displayObject\n * The display object to configure.\n */\nexport function setPivot(pivot, displayObject) {\n    displayObject.pivot.x = pivot.x;\n    displayObject.pivot.y = pivot.y;\n}\n\n/**\n * Sets the rotation angle of the given display object.\n *\n * @param {Vec2} angle\n * The rotation angle of the display object.\n *\n * @param {DisplayObject} displayObject\n * The display object to rotate.\n */\nexport function setRotation(angle, displayObject) {\n    displayObject.rotation = angle;\n}\n\n/**\n * Turns a string into an array of its lines. This is the expected format for\n * the shader source code.\n *\n * @param {String} s\n * The source code of the shader as a string.\n *\n * @return {Array<String>}\n * The split string.\n */\nexport function shaderStringToArray(s) {\n    return s.split(\"\\n\").map(s => s.trim()).filter(s => s.length > 0);\n}\n\n/**\n * Creates a new event listener covering the two cases, that another event\n * listener exists already and that the opposite is true.\n *\n * @param {*} current\n * The current value of the event handler.\n *\n * @param {Function} next\n * The event handler to call after the current one.\n *\n * @return {Function}\n * The created event listener.\n */\nexport function composeEventListeners(current, next) {\n    if (typeof current === \"function\") {\n        return e => {\n            current(e);\n            next(e);\n        };\n    } else {\n        return next;\n    }\n}\n\n/**\n * Computes the hit area of the display object.\n *\n * @param {DisplayObject} displayObject\n * The display object to compute the hit area for.\n *\n * @return {Polygon}\n * The hit area.\n */\nexport function computeHitArea({width: w = 0, height: h = 0, x, y, rotation: alpha = 0}) {\n    const v = new Vec2(x, y);\n    const points = {\n        tl: new Vec2(-w/2, -h/2).rotate(alpha).add(v),\n        tr: new Vec2( w/2, -h/2).rotate(alpha).add(v),\n        br: new Vec2( w/2,  h/2).rotate(alpha).add(v),\n        bl: new Vec2(-w/2,  h/2).rotate(alpha).add(v),\n    };\n\n    return new PIXI.Polygon([\n        points.tl.x, points.tl.y,\n        points.tr.x, points.tr.y,\n        points.br.x, points.br.y,\n        points.bl.x, points.bl.y\n    ]);;\n}\n\n/**\n * Computes the anchor point of the sprite generated from the display object. This\n * is necessary to align it properly.\n *\n * @param {DisplayObject} displayObject\n * The display object to generate the sprite from.\n */\nexport function computeAnchor(displayObject) {\n    const {x, y, width, height} = displayObject.getBounds();\n    return {\n        x: -x / width,\n        y: -y / height,\n    };\n}"
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "canvasRenderer",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~canvasRenderer",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{canvasRenderer}",
    "description": "A canvas renderer.",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeCanvasSprite",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeCanvasSprite",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeCanvasSprite}",
    "description": "Creates a sprite from the given display object using a canvas renderer.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to turn into a sprite."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "emptyDisplayObject",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~emptyDisplayObject",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{emptyDisplayObject}",
    "description": "An empty display object.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "adjustConf",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~adjustConf",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{adjustConf}",
    "description": "Replaces the properties in the base configuration with the ones listed in the\nadjustments object. Anything not listed in the adjustments object is taken\nunaltered from the base object.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The base configuration."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "adjustments",
        "description": "The adjustments to make."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The resulting configuration."
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeLine",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeLine",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeLine}",
    "description": "Creates a display object of line.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the line should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.width",
        "description": "The width of the line."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.color",
        "description": "The color of the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "startPos",
        "description": "Where to start the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "endPos",
        "description": "Where to end the line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeQuadraticCurve",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeQuadraticCurve",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeQuadraticCurve}",
    "description": "Creates a display object of quadratic curve.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the line should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.width",
        "description": "The width of the line."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.color",
        "description": "The color of the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "startPos",
        "description": "Where to start the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "controlPos",
        "description": "The control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "endPos",
        "description": "Where to end the line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeBezierCurve",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeBezierCurve",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeBezierCurve}",
    "description": "Creates a display object of quadratic curve.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the line should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.width",
        "description": "The width of the line."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.color",
        "description": "The color of the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "startPos",
        "description": "Where to start the line."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "controlPos1",
        "description": "The first control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "controlPos2",
        "description": "The second control point."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "endPos",
        "description": "Where to end the line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeCircle",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeCircle",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeCircle}",
    "description": "Creates a display object of a circle. This function is curried.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the circle should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border",
        "description": "How the border around the circle should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.width",
        "description": "The line width of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.color",
        "description": "The color of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.backgroundColor",
        "description": "The color to fill the circle with."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "The radius of the circle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeEllipse",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeEllipse",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeEllipse}",
    "description": "Creates a display object of an ellipse. This function is curried.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the ellipse should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border",
        "description": "How the border around the ellipse should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.width",
        "description": "The line width of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.color",
        "description": "The color of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.backgroundColor",
        "description": "The color to fill the ellipse with."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfWidth",
        "description": "The half width of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "halfHeight",
        "description": "The half height of the ellipse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeRect",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeRect",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeRect}",
    "description": "Creates a display object of a rectangle. This function is curried.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the rectangle should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border",
        "description": "How the border around the rectangle should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.width",
        "description": "The line width of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.color",
        "description": "The color of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.backgroundColor",
        "description": "The color to fill the rectangle with."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the rectangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeRoundedRect",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeRoundedRect",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeRoundedRect}",
    "description": "Creates a display object of a rounded rectangle. This function is curried.",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the rounded rectangle should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border",
        "description": "How the border around the rounded rectangle should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.width",
        "description": "The line width of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.color",
        "description": "The color of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.backgroundColor",
        "description": "The color to fill the rounded rectangle with."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the rounded rectangle."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the rounded rectangle."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "The radius of the circles at the corners of the rectangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The created display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeText",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeText",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeText}",
    "description": "Creates a display object of a text. This function is curried.",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the text should look."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.align",
        "description": "How the text should be aligned. The possible values are \"left\", \"center\" and\n\"right\". For a single line of text this option has no effect."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.dropShadow",
        "description": "How the drop shadow of the text should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.dropShadow.distance",
        "description": "How long the drop shadow should be. Set this to 0 to remove it."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.dropShadow.angle",
        "description": "The angle of the drop shadow given in radian. An angle of 0 means that the\nshadow goes to the right, increasing the angle moves the shadow clockwise."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.dropShadow.color",
        "description": "The color of the shadow."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.fillColor",
        "description": "The color to fill the text with."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.font",
        "description": "Configures the font of the text."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.font.family",
        "description": "The font-family to use."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.font.size",
        "description": "The font-size to use."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.font.weight",
        "description": "The weight of the font. This can either be \"normal\" or \"bold\"."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.font.style",
        "description": "The style of the font. This can either be \"normal\", \"italic\" or \"oblique\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.stroke",
        "description": "How the stroke around the text should look."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.stroke.color",
        "description": "The color of the stroke around the text."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.stroke.thickness",
        "description": "How thick the stroke should be. Set this to 0 to deactivate it."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.wordWrapWidth",
        "description": "The width at which the text is going to wrap. Set this to 0 to disable it."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string to use as text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeBox",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeBox",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeBox}",
    "description": "Creates a display object of a box around the given display object.",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the box should look."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.shape",
        "description": "The shape of the box. This can be one of \"circle\", \"ellipse\", \"rect\" or\n\"roundedRect\"."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.padding",
        "description": "The padding to add around the given display object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border",
        "description": "How the border of the box should look."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.width",
        "description": "The line width of the border."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.color",
        "description": "The color of the border."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.border.radius",
        "description": "This is only relevant when the shape is set to \"roundedRect\". It describes\nthe radius of the circles in the corners of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "Color"
        ],
        "spread": false,
        "optional": false,
        "name": "style.backgroundColor",
        "description": "The color to fill the box with."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make a box for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting box."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeMargin",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeMargin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeMargin}",
    "description": "Creates a transparent margin for the given display object. This function is\ncurried.",
    "lineNumber": 480,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "margin",
        "description": "How wide the margin at one side should be."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make a margin for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeImage",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeImage",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeImage}",
    "description": "Creates a diplay object from the image at the given location.",
    "lineNumber": 514,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the image should look."
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.width",
        "description": "The width of the image. Set this to \"orig\" to use the width of the\noriginal image and to \"auto\" to keep the aspect ratio when setting\nthe height."
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.height",
        "description": "The height of the image. Set this to \"orig\" to use the height of the\noriginal image and to \"auto\" to keep the aspect ratio when setting\nthe width."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The location of the image."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeCaption",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeCaption",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeCaption}",
    "description": "Creates a display object of a caption for the given display object. This\nfunction is curried.",
    "lineNumber": 556,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How the caption should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.text",
        "description": "How the text should look. Refer to the makeText function to see how this\nsub-object has to be structured."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.caption",
        "description": "Affects the style of the caption in general."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "style.caption.side",
        "description": "Where the caption should be positioned in relation to the given display\nobject. Possible options are \"center\", \"above\", \"right\", \"below\" and \"left\"."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "style.caption.gap",
        "description": "How large the gap between the given display object and the caption should be."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to display."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make the caption for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeBoxedLabel",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeBoxedLabel",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeBoxedLabel}",
    "description": "Creates a label surrounded by a box.",
    "lineNumber": 597,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How everything should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.text",
        "description": "How the text should look. Refer to the makeText function to see how this\nsub-object has to be structured."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.box",
        "description": "How the box around the text should look. Refer to the makeBox function to see\nhow this sub-object has to be structured."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.box.margin",
        "description": "The margin to add around the box. This is useful to prevent PIXI from cutting\nsome pixels of the border off."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to display."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeCaptionedImage",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~makeCaptionedImage",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{makeCaptionedImage}",
    "description": "Creates an image with a label.",
    "lineNumber": 631,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "How everything should look."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.image",
        "description": "How the image should look. Refer to the makeImage function to see how this\nsub-object should be structured."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style.caption",
        "description": "How the caption should look. Check the documentation of the makeCaption\nfunction for further information."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePath",
        "description": "The path to the image."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The caption text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayObject"
      ],
      "spread": false,
      "description": "The resulting display object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "addInteraction",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~addInteraction",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{addInteraction}",
    "description": "Adds event handlers to the given display object.",
    "lineNumber": 686,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "Contains the event handlers to add."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.mouseover",
        "description": "Is triggered when the mouse moves onto the display object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.mouseout",
        "description": "Is triggered when the mouse leaves the display object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.mousedown",
        "description": "Is triggered when the left mousebutton is pressed when the mouse is on the\ndisplay object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.mouseup",
        "description": "Is triggered when the left mousebutton is released when the mouse is on the\ndisplay object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.click",
        "description": "Is triggered right after the mouseup event."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.touchstart",
        "description": "Is triggered when the display object is touched."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.touchend",
        "description": "Is triggered when the display object is no longer touched."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "conf.tap",
        "description": "Is triggered right after the touchend event."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to make interactive."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setPosition",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~setPosition",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{setPosition}",
    "description": "Sets the position of the given display object.",
    "lineNumber": 708,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Where to place the display object."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to place."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setScale",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~setScale",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{setScale}",
    "description": "Sets the scale of the given display object.",
    "lineNumber": 723,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": "The factor to enlarge or shrink the display object by. If a single number\nis provided, it is use for the x- and y-directions."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to scale."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setBounds",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~setBounds",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{setBounds}",
    "description": "Sets the width and height of the given display object.",
    "lineNumber": 749,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the image. Set this to \"orig\" to use the width of the\noriginal image and to \"auto\" to keep the aspect ratio when setting\nthe height."
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the image. Set this to \"orig\" to use the height of the\noriginal image and to \"auto\" to keep the aspect ratio when setting\nthe width."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to adjust."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setPivot",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~setPivot",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{setPivot}",
    "description": "Sets the point to rotate the given display object about.",
    "lineNumber": 781,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "pivot",
        "description": "Where to rotate the display object around."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to configure."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setRotation",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~setRotation",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{setRotation}",
    "description": "Sets the rotation angle of the given display object.",
    "lineNumber": 795,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "The rotation angle of the display object."
      },
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to rotate."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "shaderStringToArray",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~shaderStringToArray",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{shaderStringToArray}",
    "description": "Turns a string into an array of its lines. This is the expected format for\nthe shader source code.",
    "lineNumber": 809,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The source code of the shader as a string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": "The split string."
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "composeEventListeners",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~composeEventListeners",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{composeEventListeners}",
    "description": "Creates a new event listener covering the two cases, that another event\nlistener exists already and that the opposite is true.",
    "lineNumber": 826,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "The current value of the event handler."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The event handler to call after the current one."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The created event listener."
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeHitArea",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~computeHitArea",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{computeHitArea}",
    "description": "Computes the hit area of the display object.",
    "lineNumber": 846,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to compute the hit area for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Polygon"
      ],
      "spread": false,
      "description": "The hit area."
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeAnchor",
    "memberof": "src/utils.js",
    "longname": "src/utils.js~computeAnchor",
    "access": null,
    "export": true,
    "importPath": "@ignavia/draph/src/utils.js",
    "importStyle": "{computeAnchor}",
    "description": "Computes the anchor point of the sprite generated from the display object. This\nis necessary to align it properly.",
    "lineNumber": 870,
    "params": [
      {
        "nullable": null,
        "types": [
          "DisplayObject"
        ],
        "spread": false,
        "optional": false,
        "name": "displayObject",
        "description": "The display object to generate the sprite from."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]